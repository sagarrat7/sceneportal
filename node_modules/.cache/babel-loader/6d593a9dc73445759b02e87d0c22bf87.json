{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nvar U32_MASK64 = BigInt(Math.pow(2, 32) - 1);\n\nvar _32n = BigInt(32); // We are not using BigUint64Array, because they are extremely slow as per 2022\n\n\nfunction fromBig(n) {\n  var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\n\nexports.fromBig = fromBig;\n\nfunction split(lst) {\n  var le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var Ah = new Uint32Array(lst.length);\n  var Al = new Uint32Array(lst.length);\n\n  for (var i = 0; i < lst.length; i++) {\n    var _fromBig = fromBig(lst[i], le),\n        h = _fromBig.h,\n        l = _fromBig.l;\n\n    var _ref = [h, l];\n    Ah[i] = _ref[0];\n    Al[i] = _ref[1];\n  }\n\n  return [Ah, Al];\n}\n\nexports.split = split;\n\nvar toBig = function toBig(h, l) {\n  return BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n};\n\nexports.toBig = toBig; // for Shift in [0, 32)\n\nvar shrSH = function shrSH(h, l, s) {\n  return h >>> s;\n};\n\nvar shrSL = function shrSL(h, l, s) {\n  return h << 32 - s | l >>> s;\n}; // Right rotate for Shift in [1, 32)\n\n\nvar rotrSH = function rotrSH(h, l, s) {\n  return h >>> s | l << 32 - s;\n};\n\nvar rotrSL = function rotrSL(h, l, s) {\n  return h << 32 - s | l >>> s;\n}; // Right rotate for Shift in (32, 64), NOTE: 32 is special case.\n\n\nvar rotrBH = function rotrBH(h, l, s) {\n  return h << 64 - s | l >>> s - 32;\n};\n\nvar rotrBL = function rotrBL(h, l, s) {\n  return h >>> s - 32 | l << 64 - s;\n}; // Right rotate for shift===32 (just swaps l&h)\n\n\nvar rotr32H = function rotr32H(h, l) {\n  return l;\n};\n\nvar rotr32L = function rotr32L(h, l) {\n  return h;\n}; // Left rotate for Shift in [1, 32)\n\n\nvar rotlSH = function rotlSH(h, l, s) {\n  return h << s | l >>> 32 - s;\n};\n\nvar rotlSL = function rotlSL(h, l, s) {\n  return l << s | h >>> 32 - s;\n}; // Left rotate for Shift in (32, 64), NOTE: 32 is special case.\n\n\nvar rotlBH = function rotlBH(h, l, s) {\n  return l << s - 32 | h >>> 64 - s;\n};\n\nvar rotlBL = function rotlBL(h, l, s) {\n  return h << s - 32 | l >>> 64 - s;\n}; // JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\n\n\nfunction add(Ah, Al, Bh, Bl) {\n  var l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / Math.pow(2, 32) | 0) | 0,\n    l: l | 0\n  };\n}\n\nexports.add = add; // Addition with more than 2 elements\n\nvar add3L = function add3L(Al, Bl, Cl) {\n  return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\n};\n\nvar add3H = function add3H(low, Ah, Bh, Ch) {\n  return Ah + Bh + Ch + (low / Math.pow(2, 32) | 0) | 0;\n};\n\nvar add4L = function add4L(Al, Bl, Cl, Dl) {\n  return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\n};\n\nvar add4H = function add4H(low, Ah, Bh, Ch, Dh) {\n  return Ah + Bh + Ch + Dh + (low / Math.pow(2, 32) | 0) | 0;\n};\n\nvar add5L = function add5L(Al, Bl, Cl, Dl, El) {\n  return (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\n};\n\nvar add5H = function add5H(low, Ah, Bh, Ch, Dh, Eh) {\n  return Ah + Bh + Ch + Dh + Eh + (low / Math.pow(2, 32) | 0) | 0;\n}; // prettier-ignore\n\n\nvar u64 = {\n  fromBig: fromBig,\n  split: split,\n  toBig: exports.toBig,\n  shrSH: shrSH,\n  shrSL: shrSL,\n  rotrSH: rotrSH,\n  rotrSL: rotrSL,\n  rotrBH: rotrBH,\n  rotrBL: rotrBL,\n  rotr32H: rotr32H,\n  rotr32L: rotr32L,\n  rotlSH: rotlSH,\n  rotlSL: rotlSL,\n  rotlBH: rotlBH,\n  rotlBL: rotlBL,\n  add: add,\n  add3L: add3L,\n  add3H: add3H,\n  add4L: add4L,\n  add4H: add4H,\n  add5H: add5H,\n  add5L: add5L\n};\nexports.default = u64;","map":{"version":3,"names":["Object","defineProperty","exports","value","add","toBig","split","fromBig","U32_MASK64","BigInt","_32n","n","le","h","Number","l","lst","Ah","Uint32Array","length","Al","i","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","default"],"sources":["/Users/sarahagarrat/git/sceneportal/node_modules/@noble/hashes/_u64.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}