{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\n\nconst _assert_js_1 = require(\"./_assert.js\");\n\nconst _u64_js_1 = require(\"./_u64.js\");\n\nconst utils_js_1 = require(\"./utils.js\"); // Various per round constants calculations\n\n\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\n\nconst _0n = BigInt(0);\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst _7n = BigInt(7);\n\nconst _256n = BigInt(256);\n\nconst _0x71n = BigInt(0x71);\n\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x)); // Rotational\n\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64); // Iota\n\n  let t = _0n;\n\n  for (let j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;\n  }\n\n  _SHA3_IOTA.push(t);\n}\n\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true); // Left rotation (without 0, 32, 64)\n\n\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\n\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s); // Same as keccakf1600, but allows to skip some rounds\n\n\nfunction keccakP(s) {\n  let rounds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 24;\n  const B = new Uint32Array(5 * 2); // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    } // Rho (ρ) and Pi (π)\n\n\n    let curH = s[2];\n    let curL = s[3];\n\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    } // Chi (χ)\n\n\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    } // Iota (ι)\n\n\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n\n  B.fill(0);\n}\n\nexports.keccakP = keccakP;\n\nclass Keccak extends utils_js_1.Hash {\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(blockLen, suffix, outputLen) {\n    let enableXOF = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let rounds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 24;\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    this.pos = 0;\n    this.posOut = 0;\n    this.finished = false;\n    this.destroyed = false; // Can be passed from user as dkLen\n\n    _assert_js_1.default.number(outputLen); // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n\n\n    if (0 >= this.blockLen || this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = (0, utils_js_1.u32)(this.state);\n  }\n\n  keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n\n  update(data) {\n    _assert_js_1.default.exists(this);\n\n    const {\n      blockLen,\n      state\n    } = this;\n    data = (0, utils_js_1.toBytes)(data);\n    const len = data.length;\n\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n\n      if (this.pos === blockLen) this.keccak();\n    }\n\n    return this;\n  }\n\n  finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const {\n      state,\n      suffix,\n      pos,\n      blockLen\n    } = this; // Do the padding\n\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n\n  writeInto(out) {\n    _assert_js_1.default.exists(this, false);\n\n    _assert_js_1.default.bytes(out);\n\n    this.finish();\n    const bufferOut = this.state;\n    const {\n      blockLen\n    } = this;\n\n    for (let pos = 0, len = out.length; pos < len;) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n\n    return out;\n  }\n\n  xofInto(out) {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n\n  xof(bytes) {\n    _assert_js_1.default.number(bytes);\n\n    return this.xofInto(new Uint8Array(bytes));\n  }\n\n  digestInto(out) {\n    _assert_js_1.default.output(out, this);\n\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n\n  _cloneInto(to) {\n    const {\n      blockLen,\n      suffix,\n      outputLen,\n      rounds,\n      enableXOF\n    } = this;\n    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds; // Suffix can change in cSHAKE\n\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n\n}\n\nexports.Keccak = Keccak;\n\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\n\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\n\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\n\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\n\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)(function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true);\n});\n\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);","map":{"version":3,"names":["Object","defineProperty","exports","value","shake256","shake128","keccak_512","keccak_384","keccak_256","keccak_224","sha3_512","sha3_384","sha3_256","sha3_224","Keccak","keccakP","_assert_js_1","require","_u64_js_1","utils_js_1","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","default","split","rotlH","h","l","s","rotlBH","rotlSH","rotlL","rotlBL","rotlSL","rounds","B","Uint32Array","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","Hash","constructor","blockLen","suffix","outputLen","enableXOF","pos","posOut","finished","destroyed","number","Error","state","Uint8Array","state32","u32","keccak","update","data","exists","toBytes","len","length","take","Math","min","i","finish","writeInto","out","bytes","bufferOut","set","subarray","xofInto","xof","digestInto","output","destroy","digest","_cloneInto","to","gen","wrapConstructor","genShake","wrapConstructorWithOpts","opts","dkLen","undefined"],"sources":["/Users/sarahagarrat/git/sceneportal/node_modules/@noble/hashes/sha3.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}