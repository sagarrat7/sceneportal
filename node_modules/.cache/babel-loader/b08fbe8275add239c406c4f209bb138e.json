{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sarahagarrat/git/sceneportal/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/sarahagarrat/git/sceneportal/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/sarahagarrat/git/sceneportal/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/sarahagarrat/git/sceneportal/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\n\nvar _0n = BigInt(0);\n\nvar _1n = BigInt(1);\n\nvar _2n = BigInt(2);\n\nvar CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nvar CURVE = Object.freeze({\n  a: BigInt(-1),\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n  l: CU_O,\n  n: CU_O,\n  h: BigInt(8),\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960')\n});\nexport { CURVE };\nvar POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nvar SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nvar SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nvar SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nvar INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nvar ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nvar D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n\nvar ExtendedPoint = /*#__PURE__*/function () {\n  function ExtendedPoint(x, y, z, t) {\n    _classCallCheck(this, ExtendedPoint);\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.t = t;\n  }\n\n  _createClass(ExtendedPoint, [{\n    key: \"equals\",\n    value: function equals(other) {\n      assertExtPoint(other);\n      var X1 = this.x,\n          Y1 = this.y,\n          Z1 = this.z;\n      var X2 = other.x,\n          Y2 = other.y,\n          Z2 = other.z;\n      var X1Z2 = mod(X1 * Z2);\n      var X2Z1 = mod(X2 * Z1);\n      var Y1Z2 = mod(Y1 * Z2);\n      var Y2Z1 = mod(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n  }, {\n    key: \"double\",\n    value: function double() {\n      var X1 = this.x,\n          Y1 = this.y,\n          Z1 = this.z;\n      var a = CURVE.a;\n      var A = mod(X1 * X1);\n      var B = mod(Y1 * Y1);\n      var C = mod(_2n * mod(Z1 * Z1));\n      var D = mod(a * A);\n      var x1y1 = X1 + Y1;\n      var E = mod(mod(x1y1 * x1y1) - A - B);\n      var G = D + B;\n      var F = G - C;\n      var H = D - B;\n      var X3 = mod(E * F);\n      var Y3 = mod(G * H);\n      var T3 = mod(E * H);\n      var Z3 = mod(F * G);\n      return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      assertExtPoint(other);\n      var X1 = this.x,\n          Y1 = this.y,\n          Z1 = this.z,\n          T1 = this.t;\n      var X2 = other.x,\n          Y2 = other.y,\n          Z2 = other.z,\n          T2 = other.t;\n      var A = mod((Y1 - X1) * (Y2 + X2));\n      var B = mod((Y1 + X1) * (Y2 - X2));\n      var F = mod(B - A);\n      if (F === _0n) return this.double();\n      var C = mod(Z1 * _2n * T2);\n      var D = mod(T1 * _2n * Z2);\n      var E = D + C;\n      var G = B + A;\n      var H = D - C;\n      var X3 = mod(E * F);\n      var Y3 = mod(G * H);\n      var T3 = mod(E * H);\n      var Z3 = mod(F * G);\n      return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      return this.add(other.negate());\n    }\n  }, {\n    key: \"precomputeWindow\",\n    value: function precomputeWindow(W) {\n      var windows = 1 + 256 / W;\n      var points = [];\n      var p = this;\n      var base = p;\n\n      for (var window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n\n        for (var i = 1; i < Math.pow(2, W - 1); i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n\n        p = base.double();\n      }\n\n      return points;\n    }\n  }, {\n    key: \"wNAF\",\n    value: function wNAF(n, affinePoint) {\n      if (!affinePoint && this.equals(ExtendedPoint.BASE)) affinePoint = Point.BASE;\n      var W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n\n      if (256 % W) {\n        throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n      }\n\n      var precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n\n      if (!precomputes) {\n        precomputes = this.precomputeWindow(W);\n\n        if (affinePoint && W !== 1) {\n          precomputes = ExtendedPoint.normalizeZ(precomputes);\n          pointPrecomputes.set(affinePoint, precomputes);\n        }\n      }\n\n      var p = ExtendedPoint.ZERO;\n      var f = ExtendedPoint.ZERO;\n      var windows = 1 + 256 / W;\n      var windowSize = Math.pow(2, W - 1);\n      var mask = BigInt(Math.pow(2, W) - 1);\n      var maxNumber = Math.pow(2, W);\n      var shiftBy = BigInt(W);\n\n      for (var window = 0; window < windows; window++) {\n        var offset = window * windowSize;\n        var wbits = Number(n & mask);\n        n >>= shiftBy;\n\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        if (wbits === 0) {\n          var pr = precomputes[offset];\n          if (window % 2) pr = pr.negate();\n          f = f.add(pr);\n        } else {\n          var cached = precomputes[offset + Math.abs(wbits) - 1];\n          if (wbits < 0) cached = cached.negate();\n          p = p.add(cached);\n        }\n      }\n\n      return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar, affinePoint) {\n      return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n  }, {\n    key: \"multiplyUnsafe\",\n    value: function multiplyUnsafe(scalar) {\n      var n = normalizeScalar(scalar, CURVE.l, false);\n      var G = ExtendedPoint.BASE;\n      var P0 = ExtendedPoint.ZERO;\n      if (n === _0n) return P0;\n      if (this.equals(P0) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n);\n      var p = P0;\n      var d = this;\n\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n\n      return p;\n    }\n  }, {\n    key: \"isSmallOrder\",\n    value: function isSmallOrder() {\n      return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n  }, {\n    key: \"isTorsionFree\",\n    value: function isTorsionFree() {\n      return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n  }, {\n    key: \"toAffine\",\n    value: function toAffine() {\n      var invZ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : invert(this.z);\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n      var ax = mod(x * invZ);\n      var ay = mod(y * invZ);\n      var zz = mod(z * invZ);\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return new Point(ax, ay);\n    }\n  }, {\n    key: \"fromRistrettoBytes\",\n    value: function fromRistrettoBytes() {\n      legacyRist();\n    }\n  }, {\n    key: \"toRistrettoBytes\",\n    value: function toRistrettoBytes() {\n      legacyRist();\n    }\n  }, {\n    key: \"fromRistrettoHash\",\n    value: function fromRistrettoHash() {\n      legacyRist();\n    }\n  }], [{\n    key: \"fromAffine\",\n    value: function fromAffine(p) {\n      if (!(p instanceof Point)) {\n        throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n      }\n\n      if (p.equals(Point.ZERO)) return ExtendedPoint.ZERO;\n      return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n  }, {\n    key: \"toAffineBatch\",\n    value: function toAffineBatch(points) {\n      var toInv = invertBatch(points.map(function (p) {\n        return p.z;\n      }));\n      return points.map(function (p, i) {\n        return p.toAffine(toInv[i]);\n      });\n    }\n  }, {\n    key: \"normalizeZ\",\n    value: function normalizeZ(points) {\n      return this.toAffineBatch(points).map(this.fromAffine);\n    }\n  }]);\n\n  return ExtendedPoint;\n}();\n\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\n\nfunction assertExtPoint(other) {\n  if (!(other instanceof ExtendedPoint)) throw new TypeError('ExtendedPoint expected');\n}\n\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistrettoPoint)) throw new TypeError('RistrettoPoint expected');\n}\n\nfunction legacyRist() {\n  throw new Error('Legacy method: switch to RistrettoPoint');\n}\n\nvar RistrettoPoint = /*#__PURE__*/function () {\n  function RistrettoPoint(ep) {\n    _classCallCheck(this, RistrettoPoint);\n\n    this.ep = ep;\n  }\n\n  _createClass(RistrettoPoint, [{\n    key: \"toRawBytes\",\n    value: function toRawBytes() {\n      var _this$ep = this.ep,\n          x = _this$ep.x,\n          y = _this$ep.y,\n          z = _this$ep.z,\n          t = _this$ep.t;\n      var u1 = mod(mod(z + y) * mod(z - y));\n      var u2 = mod(x * y);\n      var u2sq = mod(u2 * u2);\n\n      var _invertSqrt = invertSqrt(mod(u1 * u2sq)),\n          invsqrt = _invertSqrt.value;\n\n      var D1 = mod(invsqrt * u1);\n      var D2 = mod(invsqrt * u2);\n      var zInv = mod(D1 * D2 * t);\n      var D;\n\n      if (edIsNegative(t * zInv)) {\n        var _x = mod(y * SQRT_M1);\n\n        var _y = mod(x * SQRT_M1);\n\n        x = _x;\n        y = _y;\n        D = mod(D1 * INVSQRT_A_MINUS_D);\n      } else {\n        D = D2;\n      }\n\n      if (edIsNegative(x * zInv)) y = mod(-y);\n      var s = mod((z - y) * D);\n      if (edIsNegative(s)) s = mod(-s);\n      return numberTo32BytesLE(s);\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.toHex();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      assertRstPoint(other);\n      var a = this.ep;\n      var b = other.ep;\n      var one = mod(a.x * b.y) === mod(a.y * b.x);\n      var two = mod(a.y * b.y) === mod(a.x * b.x);\n      return one || two;\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      assertRstPoint(other);\n      return new RistrettoPoint(this.ep.add(other.ep));\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      assertRstPoint(other);\n      return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar) {\n      return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n  }, {\n    key: \"multiplyUnsafe\",\n    value: function multiplyUnsafe(scalar) {\n      return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n  }], [{\n    key: \"calcElligatorRistrettoMap\",\n    value: function calcElligatorRistrettoMap(r0) {\n      var d = CURVE.d;\n      var r = mod(SQRT_M1 * r0 * r0);\n      var Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n      var c = BigInt(-1);\n      var D = mod((c - d * r) * mod(r + d));\n\n      var _uvRatio = uvRatio(Ns, D),\n          Ns_D_is_sq = _uvRatio.isValid,\n          s = _uvRatio.value;\n\n      var s_ = mod(s * r0);\n      if (!edIsNegative(s_)) s_ = mod(-s_);\n      if (!Ns_D_is_sq) s = s_;\n      if (!Ns_D_is_sq) c = r;\n      var Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n      var s2 = s * s;\n      var W0 = mod((s + s) * D);\n      var W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n      var W2 = mod(_1n - s2);\n      var W3 = mod(_1n + s2);\n      return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n  }, {\n    key: \"hashToCurve\",\n    value: function hashToCurve(hex) {\n      hex = ensureBytes(hex, 64);\n      var r1 = bytes255ToNumberLE(hex.slice(0, 32));\n      var R1 = this.calcElligatorRistrettoMap(r1);\n      var r2 = bytes255ToNumberLE(hex.slice(32, 64));\n      var R2 = this.calcElligatorRistrettoMap(r2);\n      return new RistrettoPoint(R1.add(R2));\n    }\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      hex = ensureBytes(hex, 32);\n      var a = CURVE.a,\n          d = CURVE.d;\n      var emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n      var s = bytes255ToNumberLE(hex);\n      if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s)) throw new Error(emsg);\n      var s2 = mod(s * s);\n      var u1 = mod(_1n + a * s2);\n      var u2 = mod(_1n - a * s2);\n      var u1_2 = mod(u1 * u1);\n      var u2_2 = mod(u2 * u2);\n      var v = mod(a * d * u1_2 - u2_2);\n\n      var _invertSqrt2 = invertSqrt(mod(v * u2_2)),\n          isValid = _invertSqrt2.isValid,\n          I = _invertSqrt2.value;\n\n      var Dx = mod(I * u2);\n      var Dy = mod(I * Dx * v);\n      var x = mod((s + s) * Dx);\n      if (edIsNegative(x)) x = mod(-x);\n      var y = mod(u1 * Dy);\n      var t = mod(x * y);\n      if (!isValid || edIsNegative(t) || y === _0n) throw new Error(emsg);\n      return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n  }]);\n\n  return RistrettoPoint;\n}();\n\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nvar pointPrecomputes = new WeakMap();\n\nvar Point = /*#__PURE__*/function () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Point, [{\n    key: \"_setWindowSize\",\n    value: function _setWindowSize(windowSize) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n  }, {\n    key: \"toRawBytes\",\n    value: function toRawBytes() {\n      var bytes = numberTo32BytesLE(this.y);\n      bytes[31] |= this.x & _1n ? 0x80 : 0;\n      return bytes;\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }, {\n    key: \"toX25519\",\n    value: function toX25519() {\n      var y = this.y;\n      var u = mod((_1n + y) * invert(_1n - y));\n      return numberTo32BytesLE(u);\n    }\n  }, {\n    key: \"isTorsionFree\",\n    value: function isTorsionFree() {\n      return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.x === other.x && this.y === other.y;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new Point(mod(-this.x), this.y);\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      return this.add(other.negate());\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar) {\n      return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n  }], [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var d = CURVE.d,\n          P = CURVE.P;\n      hex = ensureBytes(hex, 32);\n      var normed = hex.slice();\n      normed[31] = hex[31] & ~0x80;\n      var y = bytesToNumberLE(normed);\n      if (strict && y >= P) throw new Error('Expected 0 < hex < P');\n      if (!strict && y >= POW_2_256) throw new Error('Expected 0 < hex < 2**256');\n      var y2 = mod(y * y);\n      var u = mod(y2 - _1n);\n      var v = mod(d * y2 + _1n);\n\n      var _uvRatio2 = uvRatio(u, v),\n          isValid = _uvRatio2.isValid,\n          x = _uvRatio2.value;\n\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      var isXOdd = (x & _1n) === _1n;\n      var isLastByteOdd = (hex[31] & 0x80) !== 0;\n\n      if (isLastByteOdd !== isXOdd) {\n        x = mod(-x);\n      }\n\n      return new Point(x, y);\n    }\n  }, {\n    key: \"fromPrivateKey\",\n    value: function () {\n      var _fromPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(privateKey) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getExtendedPublicKey(privateKey);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent.point);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function fromPrivateKey(_x2) {\n        return _fromPrivateKey.apply(this, arguments);\n      }\n\n      return fromPrivateKey;\n    }()\n  }]);\n\n  return Point;\n}();\n\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\n\nvar Signature = /*#__PURE__*/function () {\n  function Signature(r, s) {\n    _classCallCheck(this, Signature);\n\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n\n  _createClass(Signature, [{\n    key: \"assertValidity\",\n    value: function assertValidity() {\n      var r = this.r,\n          s = this.s;\n      if (!(r instanceof Point)) throw new Error('Expected Point instance');\n      normalizeScalar(s, CURVE.l, false);\n      return this;\n    }\n  }, {\n    key: \"toRawBytes\",\n    value: function toRawBytes() {\n      var u8 = new Uint8Array(64);\n      u8.set(this.r.toRawBytes());\n      u8.set(numberTo32BytesLE(this.s), 32);\n      return u8;\n    }\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return bytesToHex(this.toRawBytes());\n    }\n  }], [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var bytes = ensureBytes(hex, 64);\n      var r = Point.fromHex(bytes.slice(0, 32), false);\n      var s = bytesToNumberLE(bytes.slice(32, 64));\n      return new Signature(r, s);\n    }\n  }]);\n\n  return Signature;\n}();\n\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\n\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  if (!arrays.every(function (a) {\n    return a instanceof Uint8Array;\n  })) throw new Error('Expected Uint8Array list');\n  if (arrays.length === 1) return arrays[0];\n  var length = arrays.reduce(function (a, arr) {\n    return a + arr.length;\n  }, 0);\n  var result = new Uint8Array(length);\n\n  for (var i = 0, pad = 0; i < arrays.length; i++) {\n    var arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n\n  return result;\n}\n\nvar hexes = Array.from({\n  length: 256\n}, function (v, i) {\n  return i.toString(16).padStart(2, '0');\n});\n\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  var hex = '';\n\n  for (var i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n\n  return hex;\n}\n\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  var array = new Uint8Array(hex.length / 2);\n\n  for (var i = 0; i < array.length; i++) {\n    var j = i * 2;\n    var hexByte = hex.slice(j, j + 2);\n    var byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n\n  return array;\n}\n\nfunction numberTo32BytesBE(num) {\n  var length = 32;\n  var hex = num.toString(16).padStart(length * 2, '0');\n  return hexToBytes(hex);\n}\n\nfunction numberTo32BytesLE(num) {\n  return numberTo32BytesBE(num).reverse();\n}\n\nfunction edIsNegative(num) {\n  return (mod(num) & _1n) === _1n;\n}\n\nfunction bytesToNumberLE(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\n\nvar MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n\nfunction bytes255ToNumberLE(bytes) {\n  return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\n\nfunction mod(a) {\n  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  var res = a % b;\n  return res >= _0n ? res : b + res;\n}\n\nfunction invert(number) {\n  var modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(\"invert: expected positive integers, got n=\".concat(number, \" mod=\").concat(modulo));\n  }\n\n  var a = mod(number, modulo);\n  var b = modulo;\n  var x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n\n  while (a !== _0n) {\n    var q = b / a;\n    var r = b % a;\n    var m = x - u * q;\n    var n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n\n  var gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nfunction invertBatch(nums) {\n  var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  var tmp = new Array(nums.length);\n  var lastMultiplied = nums.reduce(function (acc, num, i) {\n    if (num === _0n) return acc;\n    tmp[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  var inverted = invert(lastMultiplied, p);\n  nums.reduceRight(function (acc, num, i) {\n    if (num === _0n) return acc;\n    tmp[i] = mod(acc * tmp[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return tmp;\n}\n\nfunction pow2(x, power) {\n  var P = CURVE.P;\n  var res = x;\n\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n\n  return res;\n}\n\nfunction pow_2_252_3(x) {\n  var P = CURVE.P;\n\n  var _5n = BigInt(5);\n\n  var _10n = BigInt(10);\n\n  var _20n = BigInt(20);\n\n  var _40n = BigInt(40);\n\n  var _80n = BigInt(80);\n\n  var x2 = x * x % P;\n  var b2 = x2 * x % P;\n  var b4 = pow2(b2, _2n) * b2 % P;\n  var b5 = pow2(b4, _1n) * x % P;\n  var b10 = pow2(b5, _5n) * b5 % P;\n  var b20 = pow2(b10, _10n) * b10 % P;\n  var b40 = pow2(b20, _20n) * b20 % P;\n  var b80 = pow2(b40, _40n) * b40 % P;\n  var b160 = pow2(b80, _80n) * b80 % P;\n  var b240 = pow2(b160, _80n) * b80 % P;\n  var b250 = pow2(b240, _10n) * b10 % P;\n  var pow_p_5_8 = pow2(b250, _2n) * x % P;\n  return {\n    pow_p_5_8: pow_p_5_8,\n    b2: b2\n  };\n}\n\nfunction uvRatio(u, v) {\n  var v3 = mod(v * v * v);\n  var v7 = mod(v3 * v3 * v);\n  var pow = pow_2_252_3(u * v7).pow_p_5_8;\n  var x = mod(u * v3 * pow);\n  var vx2 = mod(v * x * x);\n  var root1 = x;\n  var root2 = mod(x * SQRT_M1);\n  var useRoot1 = vx2 === u;\n  var useRoot2 = vx2 === mod(-u);\n  var noRoot = vx2 === mod(-u * SQRT_M1);\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2;\n  if (edIsNegative(x)) x = mod(-x);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\n\nfunction invertSqrt(number) {\n  return uvRatio(_1n, number);\n}\n\nfunction modlLE(hash) {\n  return mod(bytesToNumberLE(hash), CURVE.l);\n}\n\nfunction equalBytes(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < b1.length; i++) {\n    if (b1[i] !== b2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction ensureBytes(hex, expectedLength) {\n  var bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n  if (typeof expectedLength === 'number' && bytes.length !== expectedLength) throw new Error(\"Expected \".concat(expectedLength, \" bytes\"));\n  return bytes;\n}\n\nfunction normalizeScalar(num, max) {\n  var strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!max) throw new TypeError('Specify max value');\n  if (typeof num === 'number' && Number.isSafeInteger(num)) num = BigInt(num);\n\n  if (typeof num === 'bigint' && num < max) {\n    if (strict) {\n      if (_0n < num) return num;\n    } else {\n      if (_0n <= num) return num;\n    }\n  }\n\n  throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\n\nfunction adjustBytes25519(bytes) {\n  bytes[0] &= 248;\n  bytes[31] &= 127;\n  bytes[31] |= 64;\n  return bytes;\n}\n\nfunction decodeScalar25519(n) {\n  return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\n\nfunction checkPrivateKey(key) {\n  key = typeof key === 'bigint' || typeof key === 'number' ? numberTo32BytesBE(normalizeScalar(key, POW_2_256)) : ensureBytes(key);\n  if (key.length !== 32) throw new Error(\"Expected 32 bytes\");\n  return key;\n}\n\nfunction getKeyFromHash(hashed) {\n  var head = adjustBytes25519(hashed.slice(0, 32));\n  var prefix = hashed.slice(32, 64);\n  var scalar = modlLE(head);\n  var point = Point.BASE.multiply(scalar);\n  var pointBytes = point.toRawBytes();\n  return {\n    head: head,\n    prefix: prefix,\n    scalar: scalar,\n    point: point,\n    pointBytes: pointBytes\n  };\n}\n\nvar _sha512Sync;\n\nfunction sha512s() {\n  if (typeof _sha512Sync !== 'function') throw new Error('utils.sha512Sync must be set to use sync methods');\n  return _sha512Sync.apply(void 0, arguments);\n}\n\nfunction getExtendedPublicKey(_x3) {\n  return _getExtendedPublicKey.apply(this, arguments);\n}\n\nfunction _getExtendedPublicKey() {\n  _getExtendedPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.t0 = getKeyFromHash;\n            _context3.next = 3;\n            return utils.sha512(checkPrivateKey(key));\n\n          case 3:\n            _context3.t1 = _context3.sent;\n            return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t1));\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getExtendedPublicKey.apply(this, arguments);\n}\n\nfunction getExtendedPublicKeySync(key) {\n  return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\n\nexport function getPublicKey(_x4) {\n  return _getPublicKey.apply(this, arguments);\n}\n\nfunction _getPublicKey() {\n  _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(privateKey) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getExtendedPublicKey(privateKey);\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent.pointBytes);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getPublicKey.apply(this, arguments);\n}\n\nfunction getPublicKeySync(privateKey) {\n  return getExtendedPublicKeySync(privateKey).pointBytes;\n}\n\nexport function sign(_x5, _x6) {\n  return _sign.apply(this, arguments);\n}\n\nfunction _sign() {\n  _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(message, privateKey) {\n    var _yield$getExtendedPub, prefix, scalar, pointBytes, r, R, k, s;\n\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            message = ensureBytes(message);\n            _context5.next = 3;\n            return getExtendedPublicKey(privateKey);\n\n          case 3:\n            _yield$getExtendedPub = _context5.sent;\n            prefix = _yield$getExtendedPub.prefix;\n            scalar = _yield$getExtendedPub.scalar;\n            pointBytes = _yield$getExtendedPub.pointBytes;\n            _context5.t0 = modlLE;\n            _context5.next = 10;\n            return utils.sha512(prefix, message);\n\n          case 10:\n            _context5.t1 = _context5.sent;\n            r = (0, _context5.t0)(_context5.t1);\n            R = Point.BASE.multiply(r);\n            _context5.t2 = modlLE;\n            _context5.next = 16;\n            return utils.sha512(R.toRawBytes(), pointBytes, message);\n\n          case 16:\n            _context5.t3 = _context5.sent;\n            k = (0, _context5.t2)(_context5.t3);\n            s = mod(r + k * scalar, CURVE.l);\n            return _context5.abrupt(\"return\", new Signature(R, s).toRawBytes());\n\n          case 20:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _sign.apply(this, arguments);\n}\n\nfunction signSync(message, privateKey) {\n  message = ensureBytes(message);\n\n  var _getExtendedPublicKey2 = getExtendedPublicKeySync(privateKey),\n      prefix = _getExtendedPublicKey2.prefix,\n      scalar = _getExtendedPublicKey2.scalar,\n      pointBytes = _getExtendedPublicKey2.pointBytes;\n\n  var r = modlLE(sha512s(prefix, message));\n  var R = Point.BASE.multiply(r);\n  var k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n  var s = mod(r + k * scalar, CURVE.l);\n  return new Signature(R, s).toRawBytes();\n}\n\nfunction prepareVerification(sig, message, publicKey) {\n  message = ensureBytes(message);\n  if (!(publicKey instanceof Point)) publicKey = Point.fromHex(publicKey, false);\n\n  var _ref = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig),\n      r = _ref.r,\n      s = _ref.s;\n\n  var SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n  return {\n    r: r,\n    s: s,\n    SB: SB,\n    pub: publicKey,\n    msg: message\n  };\n}\n\nfunction finishVerification(publicKey, r, SB, hashed) {\n  var k = modlLE(hashed);\n  var kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n  var RkA = ExtendedPoint.fromAffine(r).add(kA);\n  return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\n\nexport function verify(_x7, _x8, _x9) {\n  return _verify.apply(this, arguments);\n}\n\nfunction _verify() {\n  _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(sig, message, publicKey) {\n    var _prepareVerification2, r, SB, msg, pub, hashed;\n\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _prepareVerification2 = prepareVerification(sig, message, publicKey), r = _prepareVerification2.r, SB = _prepareVerification2.SB, msg = _prepareVerification2.msg, pub = _prepareVerification2.pub;\n            _context6.next = 3;\n            return utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n\n          case 3:\n            hashed = _context6.sent;\n            return _context6.abrupt(\"return\", finishVerification(pub, r, SB, hashed));\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _verify.apply(this, arguments);\n}\n\nfunction verifySync(sig, message, publicKey) {\n  var _prepareVerification = prepareVerification(sig, message, publicKey),\n      r = _prepareVerification.r,\n      SB = _prepareVerification.SB,\n      msg = _prepareVerification.msg,\n      pub = _prepareVerification.pub;\n\n  var hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n  return finishVerification(pub, r, SB, hashed);\n}\n\nexport var sync = {\n  getExtendedPublicKey: getExtendedPublicKeySync,\n  getPublicKey: getPublicKeySync,\n  sign: signSync,\n  verify: verifySync\n};\nexport function getSharedSecret(_x10, _x11) {\n  return _getSharedSecret.apply(this, arguments);\n}\n\nfunction _getSharedSecret() {\n  _getSharedSecret = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(privateKey, publicKey) {\n    var _yield$getExtendedPub2, head, u;\n\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return getExtendedPublicKey(privateKey);\n\n          case 2:\n            _yield$getExtendedPub2 = _context7.sent;\n            head = _yield$getExtendedPub2.head;\n            u = Point.fromHex(publicKey).toX25519();\n            return _context7.abrupt(\"return\", curve25519.scalarMult(head, u));\n\n          case 6:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getSharedSecret.apply(this, arguments);\n}\n\nPoint.BASE._setWindowSize(8);\n\nfunction cswap(swap, x_2, x_3) {\n  var dummy = mod(swap * (x_2 - x_3));\n  x_2 = mod(x_2 - dummy);\n  x_3 = mod(x_3 + dummy);\n  return [x_2, x_3];\n}\n\nfunction montgomeryLadder(pointU, scalar) {\n  var P = CURVE.P;\n  var u = normalizeScalar(pointU, P);\n  var k = normalizeScalar(scalar, P);\n  var a24 = BigInt(121665);\n  var x_1 = u;\n  var x_2 = _1n;\n  var z_2 = _0n;\n  var x_3 = u;\n  var z_3 = _1n;\n  var swap = _0n;\n  var sw;\n\n  for (var t = BigInt(255 - 1); t >= _0n; t--) {\n    var k_t = k >> t & _1n;\n    swap ^= k_t;\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    swap = k_t;\n    var A = x_2 + z_2;\n    var AA = mod(A * A);\n    var B = x_2 - z_2;\n    var BB = mod(B * B);\n    var E = AA - BB;\n    var C = x_3 + z_3;\n    var D = x_3 - z_3;\n    var DA = mod(D * A);\n    var CB = mod(C * B);\n    var dacb = DA + CB;\n    var da_cb = DA - CB;\n    x_3 = mod(dacb * dacb);\n    z_3 = mod(x_1 * mod(da_cb * da_cb));\n    x_2 = mod(AA * BB);\n    z_2 = mod(E * (AA + mod(a24 * E)));\n  }\n\n  sw = cswap(swap, x_2, x_3);\n  x_2 = sw[0];\n  x_3 = sw[1];\n  sw = cswap(swap, z_2, z_3);\n  z_2 = sw[0];\n  z_3 = sw[1];\n\n  var _pow_2_252_ = pow_2_252_3(z_2),\n      pow_p_5_8 = _pow_2_252_.pow_p_5_8,\n      b2 = _pow_2_252_.b2;\n\n  var xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n  return mod(x_2 * xp2);\n}\n\nfunction encodeUCoordinate(u) {\n  return numberTo32BytesLE(mod(u, CURVE.P));\n}\n\nfunction decodeUCoordinate(uEnc) {\n  var u = ensureBytes(uEnc, 32);\n  u[31] &= 127;\n  return bytesToNumberLE(u);\n}\n\nexport var curve25519 = {\n  BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n  scalarMult: function scalarMult(privateKey, publicKey) {\n    var u = decodeUCoordinate(publicKey);\n    var p = decodeScalar25519(privateKey);\n    var pu = montgomeryLadder(u, p);\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  },\n  scalarMultBase: function scalarMultBase(privateKey) {\n    return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n  }\n};\nvar crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nexport var utils = {\n  bytesToHex: bytesToHex,\n  hexToBytes: hexToBytes,\n  concatBytes: concatBytes,\n  getExtendedPublicKey: getExtendedPublicKey,\n  mod: mod,\n  invert: invert,\n  TORSION_SUBGROUP: ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'],\n  hashToPrivateScalar: function hashToPrivateScalar(hash) {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n    return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n  },\n  randomBytes: function randomBytes() {\n    var bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      var randomBytes = crypto.node.randomBytes;\n      return new Uint8Array(randomBytes(bytesLength).buffer);\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: function randomPrivateKey() {\n    return utils.randomBytes(32);\n  },\n  sha512: function () {\n    var _sha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var message,\n          buffer,\n          _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              message = concatBytes.apply(void 0, _args2);\n\n              if (!crypto.web) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 4;\n              return crypto.web.subtle.digest('SHA-512', message.buffer);\n\n            case 4:\n              buffer = _context2.sent;\n              return _context2.abrupt(\"return\", new Uint8Array(buffer));\n\n            case 8:\n              if (!crypto.node) {\n                _context2.next = 12;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", Uint8Array.from(crypto.node.createHash('sha512').update(message).digest()));\n\n            case 12:\n              throw new Error(\"The environment doesn't have sha512 function\");\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function sha512() {\n      return _sha.apply(this, arguments);\n    }\n\n    return sha512;\n  }(),\n  precompute: function precompute() {\n    var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n    var cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n\n    cached._setWindowSize(windowSize);\n\n    cached.multiply(_2n);\n    return cached;\n  },\n  sha512Sync: undefined\n};\nObject.defineProperties(utils, {\n  sha512Sync: {\n    configurable: false,\n    get: function get() {\n      return _sha512Sync;\n    },\n    set: function set(val) {\n      if (!_sha512Sync) _sha512Sync = val;\n    }\n  }\n});","map":{"version":3,"names":["nodeCrypto","_0n","BigInt","_1n","_2n","CU_O","CURVE","Object","freeze","a","d","P","l","n","h","Gx","Gy","POW_2_256","SQRT_M1","SQRT_D","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","mod","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","double","add","negate","W","windows","points","p","base","window","push","i","affinePoint","equals","BASE","Point","_WINDOW_SIZE","Error","precomputes","pointPrecomputes","get","precomputeWindow","normalizeZ","set","ZERO","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","pr","cached","Math","abs","scalar","wNAF","normalizeScalar","P0","multiplyUnsafe","invZ","invert","ax","ay","zz","legacyRist","TypeError","toInv","invertBatch","map","toAffine","toAffineBatch","fromAffine","assertRstPoint","RistrettoPoint","ep","u1","u2","u2sq","invertSqrt","invsqrt","value","D1","D2","zInv","edIsNegative","_x","_y","s","numberTo32BytesLE","bytesToHex","toRawBytes","toHex","b","one","two","subtract","multiply","r0","r","Ns","c","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","hex","ensureBytes","r1","bytes255ToNumberLE","slice","R1","calcElligatorRistrettoMap","r2","R2","emsg","equalBytes","u1_2","u2_2","v","I","Dx","Dy","WeakMap","delete","bytes","u","isTorsionFree","strict","normed","bytesToNumberLE","y2","isXOdd","isLastByteOdd","privateKey","getExtendedPublicKey","point","Signature","assertValidity","u8","Uint8Array","fromHex","concatBytes","arrays","every","length","reduce","arr","result","pad","hexes","Array","from","toString","padStart","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","num","reverse","MAX_255B","res","number","modulo","q","m","gcd","nums","tmp","lastMultiplied","acc","inverted","reduceRight","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","pow","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","hash","b1","expectedLength","max","isSafeInteger","adjustBytes25519","decodeScalar25519","checkPrivateKey","key","getKeyFromHash","hashed","head","prefix","pointBytes","_sha512Sync","sha512s","utils","sha512","getExtendedPublicKeySync","getPublicKey","getPublicKeySync","sign","message","R","k","signSync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","kA","RkA","verify","verifySync","sync","getSharedSecret","toX25519","curve25519","scalarMult","_setWindowSize","cswap","swap","x_2","x_3","dummy","montgomeryLadder","pointU","a24","x_1","z_2","z_3","sw","k_t","AA","BB","DA","CB","dacb","da_cb","xp2","encodeUCoordinate","decodeUCoordinate","uEnc","BASE_POINT_U","pu","scalarMultBase","crypto","node","web","self","undefined","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","buffer","randomPrivateKey","subtle","digest","createHash","update","precompute","sha512Sync","defineProperties","configurable","val"],"sources":["/Users/sarahagarrat/git/sceneportal/node_modules/@noble/ed25519/lib/esm/index.js"],"sourcesContent":["/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}