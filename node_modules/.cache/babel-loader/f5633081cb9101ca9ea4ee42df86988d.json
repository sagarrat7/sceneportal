{"ast":null,"code":"var _jsxFileName = \"/Users/sarahagarrat/git/sceneportal/src/App.js\",\n    _s = $RefreshSig$();\n\n//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from './idl.json'; //CONSTANTS\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3;\nlet baseAccount = Keypair.generate();\nconst programID = new PublicKey('GE2E6QyuXkhRDzBNzYogSahdumMzh53zo7zu7skhdYJP');\nconst network = clusterApiUrl('devnet');\nconst opts = {\n  preflightCommitment: \"processed\"\n};\n\nconst App = () => {\n  _s();\n\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]); //TOASTS\n\n  const showPhantomToast = () => toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n\n  const showGifSentToast = () => toast.success(\"GIF Sent!\"); //ACTIONS\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log(\"Connected with Public Key:\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Gif link:\", inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue(\"\");\n      showGifSentToast();\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this);\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"connected-header\",\n          children: \"SCENE PORTAL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button disconnect-wallet-button\",\n          onClick: disconnectWallet,\n          children: \"SIGN OUT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form\",\n          onSubmit: event => {\n            event.preventDefault();\n            sendGif();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"post your favorite film/tv scene\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"gif-image\",\n              src: item.gifLink,\n              alt: item.gifLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      children: \"SIGN IN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"header\",\n      children: \"Scene Portal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-header\",\n      children: \"Your favorite scenes, on the blockchain\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kiki\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this); //useEFFECTS\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Toaster, {\n        toastOptions: {\n          className: \"\",\n          duration: 3000,\n          style: {\n            border: \"1px solid #713200\",\n            padding: \"16px\",\n            color: \"#713200\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [!walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","toast","Toaster","idl","SystemProgram","Keypair","baseAccount","generate","programID","network","opts","preflightCommitment","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","showPhantomToast","showConnectedWalletToast","success","showDisconnectedWalletToast","showGifSentToast","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","error","connectWallet","disconnectWallet","onInputChange","event","value","target","getProgram","fetchIdl","getProvider","getGifList","program","account","fetch","connection","provider","createGifAccount","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","sendGif","length","renderConnectedContainer","preventDefault","map","item","index","gifLink","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener","className","duration","style","border","padding","color"],"sources":["/Users/sarahagarrat/git/sceneportal/src/App.js"],"sourcesContent":["//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from './idl.json';\n\n\n//CONSTANTS\nconst { SystemProgram, Keypair } = web3;\nlet baseAccount = Keypair.generate();\nconst programID = new PublicKey('GE2E6QyuXkhRDzBNzYogSahdumMzh53zo7zu7skhdYJP');\nconst network = clusterApiUrl('devnet');\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n\nconst App = () => {\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  //TOASTS\n  const showPhantomToast = () =>\n    toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n  const showGifSentToast = () => toast.success(\"GIF Sent!\");\n\n\n  //ACTIONS\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n          \"Connected with Public Key:\",\n          response.publicKey.toString()\n         );\n         setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  }; \n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getGifList = async() => {\n    try {\n      const program = await getProgram(); \n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      \n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Gif link:\", inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue(\"\");\n      showGifSentToast();\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <p className=\"connected-header\">SCENE PORTAL</p>\n          <button\n            className=\"cta-button disconnect-wallet-button\"\n            onClick={disconnectWallet}\n          >\n            SIGN OUT\n          </button>\n          <form\n            className=\"form\"\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"post your favorite film/tv scene\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img className=\"gif-image\" src={item.gifLink}  alt ={item.gifLink}/>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <div className=\"container\">\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        SIGN IN\n      </button>\n      <p className=\"header\">Scene Portal</p>\n      <p className=\"sub-header\">Your favorite scenes, on the blockchain</p>\n      <div className=\"moon\" />\n      <div className=\"kiki\" />\n    </div>\n  );\n\n  //useEFFECTS\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <Toaster\n          toastOptions={{\n            className: \"\",\n            duration: 3000,\n            style: {\n              border: \"1px solid #713200\",\n              padding: \"16px\",\n              color: \"#713200\",\n            },\n          }}\n        />\n        <div className=\"header-container\">\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}