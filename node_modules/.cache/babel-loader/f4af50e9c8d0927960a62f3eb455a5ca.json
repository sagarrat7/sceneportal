{"ast":null,"code":"var _jsxFileName = \"/Users/sarahagarrat/git/sceneportal/src/App.js\",\n    _s = $RefreshSig$();\n\n//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from './idl.json'; //import kp from './keypair.json'\n//CONSTANTS\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3;\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\nconst programID = new PublicKey(\"GE2E6QyuXkhRDzBNzYogSahdumMzh53zo7zu7skhdYJP\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\"\n};\n\nconst App = () => {\n  _s();\n\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]); //TOASTS\n\n  const showPhantomToast = () => toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n\n  const showGifSentToast = () => toast.success(\"GIF Sent!\"); //ACTIONS\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log(\"Connected with Public Key:\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Gif link:\", inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue(\"\");\n      showGifSentToast();\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"connected-header\",\n      children: \"SCENE PORTAL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cta-button disconnect-wallet-button\",\n      onClick: disconnectWallet,\n      children: \"SIGN OUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: event => {\n        event.preventDefault();\n        sendGif();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-grid\",\n        children: gifList.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-item\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"gif-image\",\n            src: gif,\n            alt: gif\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)\n        }, gif, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"post your favorite film/tv scene\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      children: \"SIGN IN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"header\",\n      children: \"Scene Portal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-header\",\n      children: \"Your favorite scenes, on the blockchain\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kiki\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this); //useEFFECTS\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\"); // Call Solana program here.\n\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Toaster, {\n        toastOptions: {\n          className: \"\",\n          duration: 3000,\n          style: {\n            border: \"1px solid #713200\",\n            padding: \"16px\",\n            color: \"#713200\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [!walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","toast","Toaster","idl","SystemProgram","Keypair","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","network","opts","preflightCommitment","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","showPhantomToast","showConnectedWalletToast","success","showDisconnectedWalletToast","showGifSentToast","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","error","connectWallet","disconnectWallet","onInputChange","event","value","target","getProgram","fetchIdl","getProvider","getGifList","program","account","fetch","connection","provider","createGifAccount","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","sendGif","length","renderConnectedContainer","preventDefault","map","gif","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener","TEST_GIFS","className","duration","style","border","padding","color"],"sources":["/Users/sarahagarrat/git/sceneportal/src/App.js"],"sourcesContent":["//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from './idl.json';\n//import kp from './keypair.json'\n\n//CONSTANTS\nconst { SystemProgram, Keypair } = web3;\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\nconst programID = new PublicKey(\"GE2E6QyuXkhRDzBNzYogSahdumMzh53zo7zu7skhdYJP\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  //TOASTS\n  const showPhantomToast = () =>\n    toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n  const showGifSentToast = () => toast.success(\"GIF Sent!\");\n\n\n  //ACTIONS\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n          \"Connected with Public Key:\",\n          response.publicKey.toString()\n         );\n         setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  }; \n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getGifList = async() => {\n    try {\n      const program = await getProgram(); \n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      \n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Gif link:\", inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue(\"\");\n      showGifSentToast();\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      <p className=\"connected-header\">SCENE PORTAL</p>\n      <button className=\"cta-button disconnect-wallet-button\" onClick={disconnectWallet}>\n        SIGN OUT\n      </button>\n      <form\n        className=\"form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          sendGif();\n        }}\n      >\n        <div className=\"gif-grid\">\n        {gifList.map((gif) => (\n          <div className=\"gif-item\" key={gif}>\n            <img className=\"gif-image\" src={gif} alt={gif} />\n          </div>\n        ))}\n        </div>\n        <input\n          type=\"text\"\n          placeholder=\"post your favorite film/tv scene\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n\n  const renderNotConnectedContainer = () => (\n    <div className=\"container\">\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        SIGN IN\n      </button>\n      <p className=\"header\">Scene Portal</p>\n      <p className=\"sub-header\">Your favorite scenes, on the blockchain</p>\n      <div className=\"moon\" />\n      <div className=\"kiki\" />\n    </div>\n  );\n\n  //useEFFECTS\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      // Call Solana program here.\n\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <Toaster\n          toastOptions={{\n            className: \"\",\n            duration: 3000,\n            style: {\n              border: \"1px solid #713200\",\n              padding: \"16px\",\n              color: \"#713200\",\n            },\n          }}\n        />\n        <div className=\"header-container\">\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}