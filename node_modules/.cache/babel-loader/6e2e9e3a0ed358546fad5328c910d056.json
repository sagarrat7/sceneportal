{"ast":null,"code":"var _jsxFileName = \"/Users/sarahagarrat/git/sceneportal/src/App.js\",\n    _s = $RefreshSig$();\n\n//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\"; //CONSTANTS\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3; //const SystemProgram = web3.SystemProgram;\n//const Keypair = web3.Keypair;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = Keypair.fromSecretKey(secret);\nconst programID = new PublicKey(\"GE2E6QyuXkhRDzBNzYogSahdumMzh53zo7zu7skhdYJP\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\"\n};\n\nconst App = () => {\n  _s();\n\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]); //TOASTS\n\n  const showPhantomToast = () => toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n\n  const showGifSentToast = () => toast.success(\"GIF Sent!\"); //ACTIONS\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log(\"Connected with Public Key:\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      console.log('base account: ' + baseAccount.publicKey);\n      console.log('user: ' + provider.wallet.publicKey);\n      console.log('sys program: ' + SystemProgram.programId);\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const shortenAddress = address => {\n    if (!address) return \"\";\n    return address.substring(0, 4) + \".....\" + address.substring(40);\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n      await getGifList();\n      showGifSentToast();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      children: \"SIGN IN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"header\",\n      children: \"Scene Portal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-header\",\n      children: \"Your favorite scenes, on the blockchain\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kiki\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"connected-header\",\n          children: \"SCENE PORTAL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button disconnect-wallet-button\",\n          onClick: disconnectWallet,\n          children: [\"SIGN OUT \", shortenAddress(walletAddress)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form\",\n          onSubmit: event => {\n            event.preventDefault();\n            sendGif();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"post your favorite film/tv scene\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"SUBMIT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"gif-image\",\n              src: item.gifLink,\n              alt: item.gifLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"address-tag\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"phantom-image\",\n                src: \"https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,f_auto,q_auto:eco,dpr_1/sqzgmbkggvc1uwgapeuy\",\n                alt: \"Phantom Wallet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"address\",\n                children: [\"@\", shortenAddress(item.userAddress.toString())]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this);\n    }\n  }; //useEFFECTS\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\"); // Call Solana program here.\n\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Toaster, {\n        toastOptions: {\n          className: \"\",\n          duration: 3000,\n          style: {\n            border: \"1px solid #713200\",\n            padding: \"16px\",\n            color: \"#713200\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [!walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"o3x4z0frUQsAtyviY0jM4udbKEc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","toast","Toaster","idl","kp","SystemProgram","Keypair","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","network","opts","preflightCommitment","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","showPhantomToast","showConnectedWalletToast","success","showDisconnectedWalletToast","showGifSentToast","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","error","connectWallet","disconnectWallet","onInputChange","event","value","target","getProgram","fetchIdl","getProvider","connection","provider","createGifAccount","program","wallet","programId","rpc","startStuffOff","accounts","user","systemProgram","signers","getGifList","shortenAddress","address","substring","account","fetch","sendGif","length","addGif","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","item","index","gifLink","userAddress","onLoad","addEventListener","removeEventListener","className","duration","style","border","padding","color"],"sources":["/Users/sarahagarrat/git/sceneportal/src/App.js"],"sourcesContent":["//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\n\n//CONSTANTS\nconst { SystemProgram, Keypair } = web3;\n//const SystemProgram = web3.SystemProgram;\n//const Keypair = web3.Keypair;\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = Keypair.fromSecretKey(secret);\nconst programID = new PublicKey(\"GE2E6QyuXkhRDzBNzYogSahdumMzh53zo7zu7skhdYJP\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  //TOASTS\n\n  const showPhantomToast = () =>\n    toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n  const showGifSentToast = () => toast.success(\"GIF Sent!\");\n\n  //ACTIONS\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      console.log('base account: ' + baseAccount.publicKey);\n      console.log('user: ' + provider.wallet.publicKey);\n      console.log('sys program: ' + SystemProgram.programId);\n\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const shortenAddress = (address) => {\n    if (!address) return \"\";\n    return address.substring(0, 4) + \".....\" + address.substring(40);\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n      showGifSentToast();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <div className=\"container\">\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        SIGN IN\n      </button>\n      <p className=\"header\">Scene Portal</p>\n      <p className=\"sub-header\">Your favorite scenes, on the blockchain</p>\n      <div className=\"moon\" />\n      <div className=\"kiki\" />\n    </div>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <p className=\"connected-header\">SCENE PORTAL</p>\n          <button\n            className=\"cta-button disconnect-wallet-button\"\n            onClick={disconnectWallet}\n          >\n            SIGN OUT {shortenAddress(walletAddress)}\n          </button>\n          <form\n            className=\"form\"\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"post your favorite film/tv scene\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              SUBMIT\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img className=\"gif-image\" src={item.gifLink} alt={item.gifLink} />\n                <div className=\"address-tag\">\n                  <img\n                    className=\"phantom-image\"\n                    src=\"https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,f_auto,q_auto:eco,dpr_1/sqzgmbkggvc1uwgapeuy\"\n                    alt=\"Phantom Wallet\"\n                  />\n                  <p className=\"address\">\n                    @{shortenAddress(item.userAddress.toString())}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  //useEFFECTS\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      // Call Solana program here.\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <Toaster\n          toastOptions={{\n            className: \"\",\n            duration: 3000,\n            style: {\n              border: \"1px solid #713200\",\n              padding: \"16px\",\n              color: \"#713200\",\n            },\n          }}\n        />\n        <div className=\"header-container\">\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,QAAqD,iBAArD;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,IAA5B,QAAwC,uBAAxC;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,iBAA/B;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,EAAP,MAAe,gBAAf,C,CAEA;;;AACA,MAAM;EAAEC,aAAF;EAAiBC;AAAjB,IAA6BN,IAAnC,C,CACA;AACA;;AACA,MAAMO,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcL,EAAE,CAACM,QAAH,CAAYC,SAA1B,CAAZ;AACA,MAAMC,MAAM,GAAG,IAAIC,UAAJ,CAAeN,GAAf,CAAf;AACA,MAAMO,WAAW,GAAGR,OAAO,CAACS,aAAR,CAAsBH,MAAtB,CAApB;AACA,MAAMI,SAAS,GAAG,IAAIpB,SAAJ,CAAc,8CAAd,CAAlB;AACA,MAAMqB,OAAO,GAAGpB,aAAa,CAAC,QAAD,CAA7B;AACA,MAAMqB,IAAI,GAAG;EACXC,mBAAmB,EAAE;AADV,CAAb;;AAIA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB;EACA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoC5B,QAAQ,CAAC,IAAD,CAAlD;EACA,MAAM,CAAC6B,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAAC+B,OAAD,EAAUC,UAAV,IAAwBhC,QAAQ,CAAC,EAAD,CAAtC,CAJgB,CAMhB;;EAEA,MAAMiC,gBAAgB,GAAG,MACvB1B,KAAK,CAAC,iEAAD,CADP;;EAEA,MAAM2B,wBAAwB,GAAG,MAAM3B,KAAK,CAAC4B,OAAN,CAAc,mBAAd,CAAvC;;EACA,MAAMC,2BAA2B,GAAG,MAAM7B,KAAK,CAAC4B,OAAN,CAAc,oBAAd,CAA1C;;EACA,MAAME,gBAAgB,GAAG,MAAM9B,KAAK,CAAC4B,OAAN,CAAc,WAAd,CAA/B,CAZgB,CAchB;;;EAEA,MAAMG,wBAAwB,GAAG,YAAY;IAC3C,IAAI;MACF,MAAM;QAAEC;MAAF,IAAaC,MAAnB;;MAEA,IAAID,MAAJ,EAAY;QACV,IAAIA,MAAM,CAACE,SAAX,EAAsB;UACpBC,OAAO,CAACC,GAAR,CAAY,uBAAZ;UAEA,MAAMC,QAAQ,GAAG,MAAML,MAAM,CAACM,OAAP,CAAe;YAAEC,aAAa,EAAE;UAAjB,CAAf,CAAvB;UACAJ,OAAO,CAACC,GAAR,CACE,4BADF,EAEEC,QAAQ,CAACG,SAAT,CAAmBC,QAAnB,EAFF;UAIApB,gBAAgB,CAACgB,QAAQ,CAACG,SAAT,CAAmBC,QAAnB,EAAD,CAAhB;QACD;MACF,CAXD,MAWO;QACLf,gBAAgB;MACjB;IACF,CAjBD,CAiBE,OAAOgB,KAAP,EAAc;MACdP,OAAO,CAACO,KAAR,CAAcA,KAAd;IACD;EACF,CArBD;;EAuBA,MAAMC,aAAa,GAAG,YAAY;IAChC,MAAM;MAAEX;IAAF,IAAaC,MAAnB;;IAEA,IAAID,MAAJ,EAAY;MACV,MAAMK,QAAQ,GAAG,MAAML,MAAM,CAACM,OAAP,EAAvB;MACAH,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,QAAQ,CAACG,SAAT,CAAmBC,QAAnB,EAA1C;MACApB,gBAAgB,CAACgB,QAAQ,CAACG,SAAT,CAAmBC,QAAnB,EAAD,CAAhB;MACAd,wBAAwB;IACzB;EACF,CATD;;EAWA,MAAMiB,gBAAgB,GAAG,MAAM;IAC7BT,OAAO,CAACC,GAAR,CAAY,qBAAZ;IACAf,gBAAgB,CAAC,IAAD,CAAhB;IACAQ,2BAA2B;EAC5B,CAJD;;EAMA,MAAMgB,aAAa,GAAIC,KAAD,IAAW;IAC/B,MAAM;MAAEC;IAAF,IAAYD,KAAK,CAACE,MAAxB;IACAzB,aAAa,CAACwB,KAAD,CAAb;EACD,CAHD;;EAKA,MAAME,UAAU,GAAG,YAAY;IAC7B,MAAM/C,GAAG,GAAG,MAAML,OAAO,CAACqD,QAAR,CAAiBnC,SAAjB,EAA4BoC,WAAW,EAAvC,CAAlB;IACA,OAAO,IAAItD,OAAJ,CAAYK,GAAZ,EAAiBa,SAAjB,EAA4BoC,WAAW,EAAvC,CAAP;EACD,CAHD;;EAKA,MAAMA,WAAW,GAAG,MAAM;IACxB,MAAMC,UAAU,GAAG,IAAI1D,UAAJ,CAAesB,OAAf,EAAwBC,IAAI,CAACC,mBAA7B,CAAnB;IACA,MAAMmC,QAAQ,GAAG,IAAIvD,QAAJ,CACfsD,UADe,EAEfnB,MAAM,CAACD,MAFQ,EAGff,IAAI,CAACC,mBAHU,CAAjB;IAKA,OAAOmC,QAAP;EACD,CARD;;EAUA,MAAMC,gBAAgB,GAAG,YAAY;IACnC,IAAI;MACF,MAAMD,QAAQ,GAAGF,WAAW,EAA5B;MACA,MAAMI,OAAO,GAAG,IAAI1D,OAAJ,CAAYK,GAAZ,EAAiBa,SAAjB,EAA4BsC,QAA5B,CAAhB;MACAlB,OAAO,CAACC,GAAR,CAAY,MAAZ;MACAD,OAAO,CAACC,GAAR,CAAY,mBAAmBvB,WAAW,CAAC2B,SAA3C;MACAL,OAAO,CAACC,GAAR,CAAY,WAAWiB,QAAQ,CAACG,MAAT,CAAgBhB,SAAvC;MACAL,OAAO,CAACC,GAAR,CAAY,kBAAkBhC,aAAa,CAACqD,SAA5C;MAEA,MAAMF,OAAO,CAACG,GAAR,CAAYC,aAAZ,CAA0B;QAC9BC,QAAQ,EAAE;UACR/C,WAAW,EAAEA,WAAW,CAAC2B,SADjB;UAERqB,IAAI,EAAER,QAAQ,CAACG,MAAT,CAAgBhB,SAFd;UAGRsB,aAAa,EAAE1D,aAAa,CAACqD;QAHrB,CADoB;QAM9BM,OAAO,EAAE,CAAClD,WAAD;MANqB,CAA1B,CAAN;MAQAsB,OAAO,CAACC,GAAR,CACE,uCADF,EAEEvB,WAAW,CAAC2B,SAAZ,CAAsBC,QAAtB,EAFF;MAIA,MAAMuB,UAAU,EAAhB;IACD,CArBD,CAqBE,OAAOtB,KAAP,EAAc;MACdP,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDM,KAAnD;IACD;EACF,CAzBD;;EA2BA,MAAMuB,cAAc,GAAIC,OAAD,IAAa;IAClC,IAAI,CAACA,OAAL,EAAc,OAAO,EAAP;IACd,OAAOA,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,IAA0B,OAA1B,GAAoCD,OAAO,CAACC,SAAR,CAAkB,EAAlB,CAA3C;EACD,CAHD;;EAKA,MAAMH,UAAU,GAAG,YAAY;IAC7B,IAAI;MACF,MAAMT,OAAO,GAAG,MAAMN,UAAU,EAAhC;MACA,MAAMmB,OAAO,GAAG,MAAMb,OAAO,CAACa,OAAR,CAAgBvD,WAAhB,CAA4BwD,KAA5B,CACpBxD,WAAW,CAAC2B,SADQ,CAAtB;MAIAL,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BgC,OAA/B;MACA3C,UAAU,CAAC2C,OAAO,CAAC5C,OAAT,CAAV;IACD,CARD,CAQE,OAAOkB,KAAP,EAAc;MACdP,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCM,KAArC;MACAjB,UAAU,CAAC,IAAD,CAAV;IACD;EACF,CAbD;;EAeA,MAAM6C,OAAO,GAAG,YAAY;IAC1B,IAAIhD,UAAU,CAACiD,MAAX,KAAsB,CAA1B,EAA6B;MAC3BpC,OAAO,CAACC,GAAR,CAAY,oBAAZ;MACA;IACD;;IACDb,aAAa,CAAC,EAAD,CAAb;IACAY,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBd,UAAzB;;IACA,IAAI;MACF,MAAM+B,QAAQ,GAAGF,WAAW,EAA5B;MACA,MAAMI,OAAO,GAAG,IAAI1D,OAAJ,CAAYK,GAAZ,EAAiBa,SAAjB,EAA4BsC,QAA5B,CAAhB;MAEA,MAAME,OAAO,CAACG,GAAR,CAAYc,MAAZ,CAAmBlD,UAAnB,EAA+B;QACnCsC,QAAQ,EAAE;UACR/C,WAAW,EAAEA,WAAW,CAAC2B,SADjB;UAERqB,IAAI,EAAER,QAAQ,CAACG,MAAT,CAAgBhB;QAFd;MADyB,CAA/B,CAAN;MAMAL,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDd,UAAhD;MAEA,MAAM0C,UAAU,EAAhB;MACAlC,gBAAgB;IACjB,CAdD,CAcE,OAAOY,KAAP,EAAc;MACdP,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCM,KAAlC;IACD;EACF,CAxBD;;EA0BA,MAAM+B,2BAA2B,GAAG,mBAClC;IAAK,SAAS,EAAC,WAAf;IAAA,wBACE;MACE,SAAS,EAAC,kCADZ;MAEE,OAAO,EAAE9B,aAFX;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAOE;MAAG,SAAS,EAAC,QAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF,eAQE;MAAG,SAAS,EAAC,YAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARF,eASE;MAAK,SAAS,EAAC;IAAf;MAAA;MAAA;MAAA;IAAA,QATF,eAUE;MAAK,SAAS,EAAC;IAAf;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;;EAeA,MAAM+B,wBAAwB,GAAG,MAAM;IACrC,IAAIlD,OAAO,KAAK,IAAhB,EAAsB;MACpB,oBACE;QAAK,SAAS,EAAC,qBAAf;QAAA,uBACE;UACE,SAAS,EAAC,8BADZ;UAEE,OAAO,EAAE8B,gBAFX;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF;IAUD,CAXD,MAWO;MACL,oBACE;QAAK,SAAS,EAAC,qBAAf;QAAA,wBACE;UAAG,SAAS,EAAC,kBAAb;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,SAAS,EAAC,qCADZ;UAEE,OAAO,EAAEV,gBAFX;UAAA,wBAIYqB,cAAc,CAAC7C,aAAD,CAJ1B;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAQE;UACE,SAAS,EAAC,MADZ;UAEE,QAAQ,EAAG0B,KAAD,IAAW;YACnBA,KAAK,CAAC6B,cAAN;YACAL,OAAO;UACR,CALH;UAAA,wBAOE;YACE,IAAI,EAAC,MADP;YAEE,WAAW,EAAC,kCAFd;YAGE,KAAK,EAAEhD,UAHT;YAIE,QAAQ,EAAEuB;UAJZ;YAAA;YAAA;YAAA;UAAA,QAPF,eAaE;YAAQ,IAAI,EAAC,QAAb;YAAsB,SAAS,EAAC,8BAAhC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAbF;QAAA;UAAA;UAAA;UAAA;QAAA,QARF,eAyBE;UAAK,SAAS,EAAC,UAAf;UAAA,UACGrB,OAAO,CAACoD,GAAR,CAAY,CAACC,IAAD,EAAOC,KAAP,kBACX;YAAK,SAAS,EAAC,UAAf;YAAA,wBACE;cAAK,SAAS,EAAC,WAAf;cAA2B,GAAG,EAAED,IAAI,CAACE,OAArC;cAA8C,GAAG,EAAEF,IAAI,CAACE;YAAxD;cAAA;cAAA;cAAA;YAAA,QADF,eAEE;cAAK,SAAS,EAAC,aAAf;cAAA,wBACE;gBACE,SAAS,EAAC,eADZ;gBAEE,GAAG,EAAC,mHAFN;gBAGE,GAAG,EAAC;cAHN;gBAAA;gBAAA;gBAAA;cAAA,QADF,eAME;gBAAG,SAAS,EAAC,SAAb;gBAAA,gBACId,cAAc,CAACY,IAAI,CAACG,WAAL,CAAiBvC,QAAjB,EAAD,CADlB;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QANF;YAAA;cAAA;cAAA;cAAA;YAAA,QAFF;UAAA,GAA+BqC,KAA/B;YAAA;YAAA;YAAA;UAAA,QADD;QADH;UAAA;UAAA;UAAA;QAAA,QAzBF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF;IA6CD;EACF,CA3DD,CApKgB,CAiOhB;;;EAEAtF,SAAS,CAAC,MAAM;IACd,MAAMyF,MAAM,GAAG,YAAY;MACzB,MAAMlD,wBAAwB,EAA9B;IACD,CAFD;;IAGAE,MAAM,CAACiD,gBAAP,CAAwB,MAAxB,EAAgCD,MAAhC;IACA,OAAO,MAAMhD,MAAM,CAACkD,mBAAP,CAA2B,MAA3B,EAAmCF,MAAnC,CAAb;EACD,CANQ,EAMN,EANM,CAAT;EAQAzF,SAAS,CAAC,MAAM;IACd,IAAI4B,aAAJ,EAAmB;MACjBe,OAAO,CAACC,GAAR,CAAY,sBAAZ,EADiB,CAGjB;;MACA4B,UAAU;IACX;EACF,CAPQ,EAON,CAAC5C,aAAD,CAPM,CAAT;EASA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAK,SAAS,EAAEA,aAAa,GAAG,kBAAH,GAAwB,WAArD;MAAA,wBACE,QAAC,OAAD;QACE,YAAY,EAAE;UACZgE,SAAS,EAAE,EADC;UAEZC,QAAQ,EAAE,IAFE;UAGZC,KAAK,EAAE;YACLC,MAAM,EAAE,mBADH;YAELC,OAAO,EAAE,MAFJ;YAGLC,KAAK,EAAE;UAHF;QAHK;MADhB;QAAA;QAAA;QAAA;MAAA,QADF,eAYE;QAAK,SAAS,EAAC,kBAAf;QAAA,WACG,CAACrE,aAAD,IAAkBqD,2BAA2B,EADhD,EAEGrD,aAAa,IAAIsD,wBAAwB,EAF5C;MAAA;QAAA;QAAA;QAAA;MAAA,QAZF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CAzQD;;GAAMvD,G;;KAAAA,G;AA2QN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}