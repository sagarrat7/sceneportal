{"ast":null,"code":"/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\n\nconst _0n = BigInt(0);\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst _3n = BigInt(3);\n\nconst _8n = BigInt(8);\n\nconst CURVE = Object.freeze({\n  a: _0n,\n  b: BigInt(7),\n  P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n  n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n  h: _1n,\n  Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n  Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee')\n});\nexport { CURVE };\n\nfunction weistrass(x) {\n  const {\n    a,\n    b\n  } = CURVE;\n  const x2 = mod(x * x);\n  const x3 = mod(x2 * x);\n  return mod(x3 + a * x + b);\n}\n\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\n\nclass ShaError extends Error {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nclass JacobianPoint {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  static fromAffine(p) {\n    if (!(p instanceof Point)) {\n      throw new TypeError('JacobianPoint#fromAffine: expected Point');\n    }\n\n    return new JacobianPoint(p.x, p.y, _1n);\n  }\n\n  static toAffineBatch(points) {\n    const toInv = invertBatch(points.map(p => p.z));\n    return points.map((p, i) => p.toAffine(toInv[i]));\n  }\n\n  static normalizeZ(points) {\n    return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n  }\n\n  equals(other) {\n    if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    const Z1Z1 = mod(Z1 * Z1);\n    const Z2Z2 = mod(Z2 * Z2);\n    const U1 = mod(X1 * Z2Z2);\n    const U2 = mod(X2 * Z1Z1);\n    const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n    const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n    return U1 === U2 && S1 === S2;\n  }\n\n  negate() {\n    return new JacobianPoint(this.x, mod(-this.y), this.z);\n  }\n\n  double() {\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const A = mod(X1 * X1);\n    const B = mod(Y1 * Y1);\n    const C = mod(B * B);\n    const x1b = X1 + B;\n    const D = mod(_2n * (mod(x1b * x1b) - A - C));\n    const E = mod(_3n * A);\n    const F = mod(E * E);\n    const X3 = mod(F - _2n * D);\n    const Y3 = mod(E * (D - X3) - _8n * C);\n    const Z3 = mod(_2n * Y1 * Z1);\n    return new JacobianPoint(X3, Y3, Z3);\n  }\n\n  add(other) {\n    if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    if (X2 === _0n || Y2 === _0n) return this;\n    if (X1 === _0n || Y1 === _0n) return other;\n    const Z1Z1 = mod(Z1 * Z1);\n    const Z2Z2 = mod(Z2 * Z2);\n    const U1 = mod(X1 * Z2Z2);\n    const U2 = mod(X2 * Z1Z1);\n    const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n    const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n    const H = mod(U2 - U1);\n    const r = mod(S2 - S1);\n\n    if (H === _0n) {\n      if (r === _0n) {\n        return this.double();\n      } else {\n        return JacobianPoint.ZERO;\n      }\n    }\n\n    const HH = mod(H * H);\n    const HHH = mod(H * HH);\n    const V = mod(U1 * HH);\n    const X3 = mod(r * r - HHH - _2n * V);\n    const Y3 = mod(r * (V - X3) - S1 * HHH);\n    const Z3 = mod(Z1 * Z2 * H);\n    return new JacobianPoint(X3, Y3, Z3);\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  multiplyUnsafe(scalar) {\n    const P0 = JacobianPoint.ZERO;\n    if (typeof scalar === 'bigint' && scalar === _0n) return P0;\n    let n = normalizeScalar(scalar);\n    if (n === _1n) return this;\n\n    if (!USE_ENDOMORPHISM) {\n      let p = P0;\n      let d = this;\n\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n\n      return p;\n    }\n\n    let {\n      k1neg,\n      k1,\n      k2neg,\n      k2\n    } = splitScalarEndo(n);\n    let k1p = P0;\n    let k2p = P0;\n    let d = this;\n\n    while (k1 > _0n || k2 > _0n) {\n      if (k1 & _1n) k1p = k1p.add(d);\n      if (k2 & _1n) k2p = k2p.add(d);\n      d = d.double();\n      k1 >>= _1n;\n      k2 >>= _1n;\n    }\n\n    if (k1neg) k1p = k1p.negate();\n    if (k2neg) k2p = k2p.negate();\n    k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n    return k1p.add(k2p);\n  }\n\n  precomputeWindow(W) {\n    const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n    const points = [];\n    let p = this;\n    let base = p;\n\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n\n      for (let i = 1; i < 2 ** (W - 1); i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n\n      p = base.double();\n    }\n\n    return points;\n  }\n\n  wNAF(n, affinePoint) {\n    if (!affinePoint && this.equals(JacobianPoint.BASE)) affinePoint = Point.BASE;\n    const W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n\n    if (256 % W) {\n      throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n    }\n\n    let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n\n    if (!precomputes) {\n      precomputes = this.precomputeWindow(W);\n\n      if (affinePoint && W !== 1) {\n        precomputes = JacobianPoint.normalizeZ(precomputes);\n        pointPrecomputes.set(affinePoint, precomputes);\n      }\n    }\n\n    let p = JacobianPoint.ZERO;\n    let f = JacobianPoint.ZERO;\n    const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n    const windowSize = 2 ** (W - 1);\n    const mask = BigInt(2 ** W - 1);\n    const maxNumber = 2 ** W;\n    const shiftBy = BigInt(W);\n\n    for (let window = 0; window < windows; window++) {\n      const offset = window * windowSize;\n      let wbits = Number(n & mask);\n      n >>= shiftBy;\n\n      if (wbits > windowSize) {\n        wbits -= maxNumber;\n        n += _1n;\n      }\n\n      if (wbits === 0) {\n        let pr = precomputes[offset];\n        if (window % 2) pr = pr.negate();\n        f = f.add(pr);\n      } else {\n        let cached = precomputes[offset + Math.abs(wbits) - 1];\n        if (wbits < 0) cached = cached.negate();\n        p = p.add(cached);\n      }\n    }\n\n    return {\n      p,\n      f\n    };\n  }\n\n  multiply(scalar, affinePoint) {\n    let n = normalizeScalar(scalar);\n    let point;\n    let fake;\n\n    if (USE_ENDOMORPHISM) {\n      const {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      } = splitScalarEndo(n);\n      let {\n        p: k1p,\n        f: f1p\n      } = this.wNAF(k1, affinePoint);\n      let {\n        p: k2p,\n        f: f2p\n      } = this.wNAF(k2, affinePoint);\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n      point = k1p.add(k2p);\n      fake = f1p.add(f2p);\n    } else {\n      const {\n        p,\n        f\n      } = this.wNAF(n, affinePoint);\n      point = p;\n      fake = f;\n    }\n\n    return JacobianPoint.normalizeZ([point, fake])[0];\n  }\n\n  toAffine() {\n    let invZ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : invert(this.z);\n    const {\n      x,\n      y,\n      z\n    } = this;\n    const iz1 = invZ;\n    const iz2 = mod(iz1 * iz1);\n    const iz3 = mod(iz2 * iz1);\n    const ax = mod(x * iz2);\n    const ay = mod(y * iz3);\n    const zz = mod(z * iz1);\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return new Point(ax, ay);\n  }\n\n}\n\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  _setWindowSize(windowSize) {\n    this._WINDOW_SIZE = windowSize;\n    pointPrecomputes.delete(this);\n  }\n\n  hasEvenY() {\n    return this.y % _2n === _0n;\n  }\n\n  static fromCompressedHex(bytes) {\n    const isShort = bytes.length === 32;\n    const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n    if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n    const y2 = weistrass(x);\n    let y = sqrtMod(y2);\n    const isYOdd = (y & _1n) === _1n;\n\n    if (isShort) {\n      if (isYOdd) y = mod(-y);\n    } else {\n      const isFirstByteOdd = (bytes[0] & 1) === 1;\n      if (isFirstByteOdd !== isYOdd) y = mod(-y);\n    }\n\n    const point = new Point(x, y);\n    point.assertValidity();\n    return point;\n  }\n\n  static fromUncompressedHex(bytes) {\n    const x = bytesToNumber(bytes.subarray(1, 33));\n    const y = bytesToNumber(bytes.subarray(33, 65));\n    const point = new Point(x, y);\n    point.assertValidity();\n    return point;\n  }\n\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex);\n    const len = bytes.length;\n    const header = bytes[0];\n\n    if (len === 32 || len === 33 && (header === 0x02 || header === 0x03)) {\n      return this.fromCompressedHex(bytes);\n    }\n\n    if (len === 65 && header === 0x04) return this.fromUncompressedHex(bytes);\n    throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n  }\n\n  static fromPrivateKey(privateKey) {\n    return Point.BASE.multiply(normalizePrivateKey(privateKey));\n  }\n\n  static fromSignature(msgHash, signature, recovery) {\n    msgHash = ensureBytes(msgHash);\n    const h = truncateHash(msgHash);\n    const {\n      r,\n      s\n    } = normalizeSignature(signature);\n\n    if (recovery !== 0 && recovery !== 1) {\n      throw new Error('Cannot recover signature: invalid recovery bit');\n    }\n\n    const prefix = recovery & 1 ? '03' : '02';\n    const R = Point.fromHex(prefix + numTo32bStr(r));\n    const {\n      n\n    } = CURVE;\n    const rinv = invert(r, n);\n    const u1 = mod(-h * rinv, n);\n    const u2 = mod(s * rinv, n);\n    const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n    if (!Q) throw new Error('Cannot recover signature: point at infinify');\n    Q.assertValidity();\n    return Q;\n  }\n\n  toRawBytes() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return hexToBytes(this.toHex(isCompressed));\n  }\n\n  toHex() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const x = numTo32bStr(this.x);\n\n    if (isCompressed) {\n      const prefix = this.hasEvenY() ? '02' : '03';\n      return `${prefix}${x}`;\n    } else {\n      return `04${x}${numTo32bStr(this.y)}`;\n    }\n  }\n\n  toHexX() {\n    return this.toHex(true).slice(2);\n  }\n\n  toRawX() {\n    return this.toRawBytes(true).slice(1);\n  }\n\n  assertValidity() {\n    const msg = 'Point is not on elliptic curve';\n    const {\n      x,\n      y\n    } = this;\n    if (!isValidFieldElement(x) || !isValidFieldElement(y)) throw new Error(msg);\n    const left = mod(y * y);\n    const right = weistrass(x);\n    if (mod(left - right) !== _0n) throw new Error(msg);\n  }\n\n  equals(other) {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  negate() {\n    return new Point(this.x, mod(-this.y));\n  }\n\n  double() {\n    return JacobianPoint.fromAffine(this).double().toAffine();\n  }\n\n  add(other) {\n    return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  multiply(scalar) {\n    return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n  }\n\n  multiplyAndAddUnsafe(Q, a, b) {\n    const P = JacobianPoint.fromAffine(this);\n    const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n    const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n    const sum = aP.add(bQ);\n    return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n  }\n\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\n\nfunction sliceDER(s) {\n  return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\n\nfunction parseDERInt(data) {\n  if (data.length < 2 || data[0] !== 0x02) {\n    throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n  }\n\n  const len = data[1];\n  const res = data.subarray(2, len + 2);\n\n  if (!len || res.length !== len) {\n    throw new Error(`Invalid signature integer: wrong length`);\n  }\n\n  if (res[0] === 0x00 && res[1] <= 0x7f) {\n    throw new Error('Invalid signature integer: trailing length');\n  }\n\n  return {\n    data: bytesToNumber(res),\n    left: data.subarray(len + 2)\n  };\n}\n\nfunction parseDERSignature(data) {\n  if (data.length < 2 || data[0] != 0x30) {\n    throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n  }\n\n  if (data[1] !== data.length - 2) {\n    throw new Error('Invalid signature: incorrect length');\n  }\n\n  const {\n    data: r,\n    left: sBytes\n  } = parseDERInt(data.subarray(2));\n  const {\n    data: s,\n    left: rBytesLeft\n  } = parseDERInt(sBytes);\n\n  if (rBytesLeft.length) {\n    throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n  }\n\n  return {\n    r,\n    s\n  };\n}\n\nexport class Signature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n\n  static fromCompact(hex) {\n    const arr = hex instanceof Uint8Array;\n    const name = 'Signature.fromCompact';\n    if (typeof hex !== 'string' && !arr) throw new TypeError(`${name}: Expected string or Uint8Array`);\n    const str = arr ? bytesToHex(hex) : hex;\n    if (str.length !== 128) throw new Error(`${name}: Expected 64-byte hex`);\n    return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n  }\n\n  static fromDER(hex) {\n    const arr = hex instanceof Uint8Array;\n    if (typeof hex !== 'string' && !arr) throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n    const {\n      r,\n      s\n    } = parseDERSignature(arr ? hex : hexToBytes(hex));\n    return new Signature(r, s);\n  }\n\n  static fromHex(hex) {\n    return this.fromDER(hex);\n  }\n\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!isWithinCurveOrder(r)) throw new Error('Invalid Signature: r must be 0 < r < n');\n    if (!isWithinCurveOrder(s)) throw new Error('Invalid Signature: s must be 0 < s < n');\n  }\n\n  hasHighS() {\n    const HALF = CURVE.n >> _1n;\n    return this.s > HALF;\n  }\n\n  normalizeS() {\n    return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n  }\n\n  toDERRawBytes() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return hexToBytes(this.toDERHex(isCompressed));\n  }\n\n  toDERHex() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const sHex = sliceDER(numberToHexUnpadded(this.s));\n    if (isCompressed) return sHex;\n    const rHex = sliceDER(numberToHexUnpadded(this.r));\n    const rLen = numberToHexUnpadded(rHex.length / 2);\n    const sLen = numberToHexUnpadded(sHex.length / 2);\n    const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n    return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n  }\n\n  toRawBytes() {\n    return this.toDERRawBytes();\n  }\n\n  toHex() {\n    return this.toDERHex();\n  }\n\n  toCompactRawBytes() {\n    return hexToBytes(this.toCompactHex());\n  }\n\n  toCompactHex() {\n    return numTo32bStr(this.r) + numTo32bStr(this.s);\n  }\n\n}\n\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  if (!arrays.every(b => b instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n\n  return result;\n}\n\nconst hexes = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\n\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  let hex = '';\n\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n\n  return hex;\n}\n\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n\nfunction numTo32bStr(num) {\n  if (typeof num !== 'bigint') throw new Error('Expected bigint');\n  if (!(_0n <= num && num < POW_2_256)) throw new Error('Expected number < 2^256');\n  return num.toString(16).padStart(64, '0');\n}\n\nfunction numTo32b(num) {\n  const b = hexToBytes(numTo32bStr(num));\n  if (b.length !== 32) throw new Error('Error: expected 32 bytes');\n  return b;\n}\n\nfunction numberToHexUnpadded(num) {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nfunction hexToNumber(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n  }\n\n  return BigInt(`0x${hex}`);\n}\n\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n  const array = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n\n  return array;\n}\n\nfunction bytesToNumber(bytes) {\n  return hexToNumber(bytesToHex(bytes));\n}\n\nfunction ensureBytes(hex) {\n  return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\n\nfunction normalizeScalar(num) {\n  if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0) return BigInt(num);\n  if (typeof num === 'bigint' && isWithinCurveOrder(num)) return num;\n  throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\n\nfunction mod(a) {\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n\nfunction pow2(x, power) {\n  const {\n    P\n  } = CURVE;\n  let res = x;\n\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n\n  return res;\n}\n\nfunction sqrtMod(x) {\n  const {\n    P\n  } = CURVE;\n\n  const _6n = BigInt(6);\n\n  const _11n = BigInt(11);\n\n  const _22n = BigInt(22);\n\n  const _23n = BigInt(23);\n\n  const _44n = BigInt(44);\n\n  const _88n = BigInt(88);\n\n  const b2 = x * x * x % P;\n  const b3 = b2 * b2 * x % P;\n  const b6 = pow2(b3, _3n) * b3 % P;\n  const b9 = pow2(b6, _3n) * b3 % P;\n  const b11 = pow2(b9, _2n) * b2 % P;\n  const b22 = pow2(b11, _11n) * b11 % P;\n  const b44 = pow2(b22, _22n) * b22 % P;\n  const b88 = pow2(b44, _44n) * b44 % P;\n  const b176 = pow2(b88, _88n) * b88 % P;\n  const b220 = pow2(b176, _44n) * b44 % P;\n  const b223 = pow2(b220, _3n) * b3 % P;\n  const t1 = pow2(b223, _23n) * b22 % P;\n  const t2 = pow2(t1, _6n) * b2 % P;\n  return pow2(t2, _2n);\n}\n\nfunction invert(number) {\n  let modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n\n  let a = mod(number, modulo);\n  let b = modulo;\n  let x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n\n  while (a !== _0n) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nfunction invertBatch(nums) {\n  let p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const scratch = new Array(nums.length);\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (num === _0n) return acc;\n    scratch[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  const inverted = invert(lastMultiplied, p);\n  nums.reduceRight((acc, num, i) => {\n    if (num === _0n) return acc;\n    scratch[i] = mod(acc * scratch[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return scratch;\n}\n\nconst divNearest = (a, b) => (a + b / _2n) / b;\n\nconst ENDO = {\n  a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n  b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n  a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n  b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n  POW_2_128: BigInt('0x100000000000000000000000000000000')\n};\n\nfunction splitScalarEndo(k) {\n  const {\n    n\n  } = CURVE;\n  const {\n    a1,\n    b1,\n    a2,\n    b2,\n    POW_2_128\n  } = ENDO;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  let k1 = mod(k - c1 * a1 - c2 * a2, n);\n  let k2 = mod(-c1 * b1 - c2 * b2, n);\n  const k1neg = k1 > POW_2_128;\n  const k2neg = k2 > POW_2_128;\n  if (k1neg) k1 = n - k1;\n  if (k2neg) k2 = n - k2;\n\n  if (k1 > POW_2_128 || k2 > POW_2_128) {\n    throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n  }\n\n  return {\n    k1neg,\n    k1,\n    k2neg,\n    k2\n  };\n}\n\nfunction truncateHash(hash) {\n  const {\n    n\n  } = CURVE;\n  const byteLength = hash.length;\n  const delta = byteLength * 8 - 256;\n  let h = bytesToNumber(hash);\n  if (delta > 0) h = h >> BigInt(delta);\n  if (h >= n) h -= n;\n  return h;\n}\n\nlet _sha256Sync;\n\nlet _hmacSha256Sync;\n\nclass HmacDrbg {\n  constructor() {\n    this.v = new Uint8Array(32).fill(1);\n    this.k = new Uint8Array(32).fill(0);\n    this.counter = 0;\n  }\n\n  hmac() {\n    for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      values[_key2] = arguments[_key2];\n    }\n\n    return utils.hmacSha256(this.k, ...values);\n  }\n\n  hmacSync() {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return _hmacSha256Sync(this.k, ...values);\n  }\n\n  checkSync() {\n    if (typeof _hmacSha256Sync !== 'function') throw new ShaError('hmacSha256Sync needs to be set');\n  }\n\n  incr() {\n    if (this.counter >= 1000) throw new Error('Tried 1,000 k values for sign(), all were invalid');\n    this.counter += 1;\n  }\n\n  async reseed() {\n    let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n    this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n    this.v = await this.hmac(this.v);\n    if (seed.length === 0) return;\n    this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n    this.v = await this.hmac(this.v);\n  }\n\n  reseedSync() {\n    let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n    this.checkSync();\n    this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n    this.v = this.hmacSync(this.v);\n    if (seed.length === 0) return;\n    this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n    this.v = this.hmacSync(this.v);\n  }\n\n  async generate() {\n    this.incr();\n    this.v = await this.hmac(this.v);\n    return this.v;\n  }\n\n  generateSync() {\n    this.checkSync();\n    this.incr();\n    this.v = this.hmacSync(this.v);\n    return this.v;\n  }\n\n}\n\nfunction isWithinCurveOrder(num) {\n  return _0n < num && num < CURVE.n;\n}\n\nfunction isValidFieldElement(num) {\n  return _0n < num && num < CURVE.P;\n}\n\nfunction kmdToSig(kBytes, m, d) {\n  const k = bytesToNumber(kBytes);\n  if (!isWithinCurveOrder(k)) return;\n  const {\n    n\n  } = CURVE;\n  const q = Point.BASE.multiply(k);\n  const r = mod(q.x, n);\n  if (r === _0n) return;\n  const s = mod(invert(k, n) * mod(m + d * r, n), n);\n  if (s === _0n) return;\n  const sig = new Signature(r, s);\n  const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n  return {\n    sig,\n    recovery\n  };\n}\n\nfunction normalizePrivateKey(key) {\n  let num;\n\n  if (typeof key === 'bigint') {\n    num = key;\n  } else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n    num = BigInt(key);\n  } else if (typeof key === 'string') {\n    if (key.length !== 64) throw new Error('Expected 32 bytes of private key');\n    num = hexToNumber(key);\n  } else if (key instanceof Uint8Array) {\n    if (key.length !== 32) throw new Error('Expected 32 bytes of private key');\n    num = bytesToNumber(key);\n  } else {\n    throw new TypeError('Expected valid private key');\n  }\n\n  if (!isWithinCurveOrder(num)) throw new Error('Expected private key: 0 < key < n');\n  return num;\n}\n\nfunction normalizePublicKey(publicKey) {\n  if (publicKey instanceof Point) {\n    publicKey.assertValidity();\n    return publicKey;\n  } else {\n    return Point.fromHex(publicKey);\n  }\n}\n\nfunction normalizeSignature(signature) {\n  if (signature instanceof Signature) {\n    signature.assertValidity();\n    return signature;\n  }\n\n  try {\n    return Signature.fromDER(signature);\n  } catch (error) {\n    return Signature.fromCompact(signature);\n  }\n}\n\nexport function getPublicKey(privateKey) {\n  let isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery) {\n  let isCompressed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\n\nfunction isProbPub(item) {\n  const arr = item instanceof Uint8Array;\n  const str = typeof item === 'string';\n  const len = (arr || str) && item.length;\n  if (arr) return len === 33 || len === 65;\n  if (str) return len === 66 || len === 130;\n  if (item instanceof Point) return true;\n  return false;\n}\n\nexport function getSharedSecret(privateA, publicB) {\n  let isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (isProbPub(privateA)) throw new TypeError('getSharedSecret: first arg must be private key');\n  if (!isProbPub(publicB)) throw new TypeError('getSharedSecret: second arg must be public key');\n  const b = normalizePublicKey(publicB);\n  b.assertValidity();\n  return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\n\nfunction bits2int(bytes) {\n  const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n  return bytesToNumber(slice);\n}\n\nfunction bits2octets(bytes) {\n  const z1 = bits2int(bytes);\n  const z2 = mod(z1, CURVE.n);\n  return int2octets(z2 < _0n ? z1 : z2);\n}\n\nfunction int2octets(num) {\n  return numTo32b(num);\n}\n\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n  if (msgHash == null) throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n  const h1 = ensureBytes(msgHash);\n  const d = normalizePrivateKey(privateKey);\n  const seedArgs = [int2octets(d), bits2octets(h1)];\n\n  if (extraEntropy != null) {\n    if (extraEntropy === true) extraEntropy = utils.randomBytes(32);\n    const e = ensureBytes(extraEntropy);\n    if (e.length !== 32) throw new Error('sign: Expected 32 bytes of extra data');\n    seedArgs.push(e);\n  }\n\n  const seed = concatBytes(...seedArgs);\n  const m = bits2int(h1);\n  return {\n    seed,\n    m,\n    d\n  };\n}\n\nfunction finalizeSig(recSig, opts) {\n  let {\n    sig,\n    recovery\n  } = recSig;\n  const {\n    canonical,\n    der,\n    recovered\n  } = Object.assign({\n    canonical: true,\n    der: true\n  }, opts);\n\n  if (canonical && sig.hasHighS()) {\n    sig = sig.normalizeS();\n    recovery ^= 1;\n  }\n\n  const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n  return recovered ? [hashed, recovery] : hashed;\n}\n\nasync function sign(msgHash, privKey) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    seed,\n    m,\n    d\n  } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n  let sig;\n  const drbg = new HmacDrbg();\n  await drbg.reseed(seed);\n\n  while (!(sig = kmdToSig(await drbg.generate(), m, d))) await drbg.reseed();\n\n  return finalizeSig(sig, opts);\n}\n\nfunction signSync(msgHash, privKey) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    seed,\n    m,\n    d\n  } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n  let sig;\n  const drbg = new HmacDrbg();\n  drbg.reseedSync(seed);\n\n  while (!(sig = kmdToSig(drbg.generateSync(), m, d))) drbg.reseedSync();\n\n  return finalizeSig(sig, opts);\n}\n\nexport { sign, signSync };\nconst vopts = {\n  strict: true\n};\nexport function verify(signature, msgHash, publicKey) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : vopts;\n  let sig;\n\n  try {\n    sig = normalizeSignature(signature);\n    msgHash = ensureBytes(msgHash);\n  } catch (error) {\n    return false;\n  }\n\n  const {\n    r,\n    s\n  } = sig;\n  if (opts.strict && sig.hasHighS()) return false;\n  const h = truncateHash(msgHash);\n  let P;\n\n  try {\n    P = normalizePublicKey(publicKey);\n  } catch (error) {\n    return false;\n  }\n\n  const {\n    n\n  } = CURVE;\n  const sinv = invert(s, n);\n  const u1 = mod(h * sinv, n);\n  const u2 = mod(r * sinv, n);\n  const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n  if (!R) return false;\n  const v = mod(R.x, n);\n  return v === r;\n}\n\nfunction schnorrChallengeFinalize(ch) {\n  return mod(bytesToNumber(ch), CURVE.n);\n}\n\nclass SchnorrSignature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex);\n    if (bytes.length !== 64) throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n    const r = bytesToNumber(bytes.subarray(0, 32));\n    const s = bytesToNumber(bytes.subarray(32, 64));\n    return new SchnorrSignature(r, s);\n  }\n\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!isValidFieldElement(r) || !isWithinCurveOrder(s)) throw new Error('Invalid signature');\n  }\n\n  toHex() {\n    return numTo32bStr(this.r) + numTo32bStr(this.s);\n  }\n\n  toRawBytes() {\n    return hexToBytes(this.toHex());\n  }\n\n}\n\nfunction schnorrGetPublicKey(privateKey) {\n  return Point.fromPrivateKey(privateKey).toRawX();\n}\n\nclass InternalSchnorrSignature {\n  constructor(message, privateKey) {\n    let auxRand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : utils.randomBytes();\n    if (message == null) throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n    this.m = ensureBytes(message);\n    const {\n      x,\n      scalar\n    } = this.getScalar(normalizePrivateKey(privateKey));\n    this.px = x;\n    this.d = scalar;\n    this.rand = ensureBytes(auxRand);\n    if (this.rand.length !== 32) throw new TypeError('sign: Expected 32 bytes of aux randomness');\n  }\n\n  getScalar(priv) {\n    const point = Point.fromPrivateKey(priv);\n    const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n    return {\n      point,\n      scalar,\n      x: point.toRawX()\n    };\n  }\n\n  initNonce(d, t0h) {\n    return numTo32b(d ^ bytesToNumber(t0h));\n  }\n\n  finalizeNonce(k0h) {\n    const k0 = mod(bytesToNumber(k0h), CURVE.n);\n    if (k0 === _0n) throw new Error('sign: Creation of signature failed. k is zero');\n    const {\n      point: R,\n      x: rx,\n      scalar: k\n    } = this.getScalar(k0);\n    return {\n      R,\n      rx,\n      k\n    };\n  }\n\n  finalizeSig(R, k, e, d) {\n    return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n  }\n\n  error() {\n    throw new Error('sign: Invalid signature produced');\n  }\n\n  async calc() {\n    const {\n      m,\n      d,\n      px,\n      rand\n    } = this;\n    const tag = utils.taggedHash;\n    const t = this.initNonce(d, await tag(TAGS.aux, rand));\n    const {\n      R,\n      rx,\n      k\n    } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n    const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n    const sig = this.finalizeSig(R, k, e, d);\n    if (!(await schnorrVerify(sig, m, px))) this.error();\n    return sig;\n  }\n\n  calcSync() {\n    const {\n      m,\n      d,\n      px,\n      rand\n    } = this;\n    const tag = utils.taggedHashSync;\n    const t = this.initNonce(d, tag(TAGS.aux, rand));\n    const {\n      R,\n      rx,\n      k\n    } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n    const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n    const sig = this.finalizeSig(R, k, e, d);\n    if (!schnorrVerifySync(sig, m, px)) this.error();\n    return sig;\n  }\n\n}\n\nasync function schnorrSign(msg, privKey, auxRand) {\n  return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\n\nfunction schnorrSignSync(msg, privKey, auxRand) {\n  return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\n\nfunction initSchnorrVerify(signature, message, publicKey) {\n  const raw = signature instanceof SchnorrSignature;\n  const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n  if (raw) sig.assertValidity();\n  return { ...sig,\n    m: ensureBytes(message),\n    P: normalizePublicKey(publicKey)\n  };\n}\n\nfunction finalizeSchnorrVerify(r, P, s, e) {\n  const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n  if (!R || !R.hasEvenY() || R.x !== r) return false;\n  return true;\n}\n\nasync function schnorrVerify(signature, message, publicKey) {\n  try {\n    const {\n      r,\n      s,\n      m,\n      P\n    } = initSchnorrVerify(signature, message, publicKey);\n    const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n    return finalizeSchnorrVerify(r, P, s, e);\n  } catch (error) {\n    return false;\n  }\n}\n\nfunction schnorrVerifySync(signature, message, publicKey) {\n  try {\n    const {\n      r,\n      s,\n      m,\n      P\n    } = initSchnorrVerify(signature, message, publicKey);\n    const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n    return finalizeSchnorrVerify(r, P, s, e);\n  } catch (error) {\n    if (error instanceof ShaError) throw error;\n    return false;\n  }\n}\n\nexport const schnorr = {\n  Signature: SchnorrSignature,\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  signSync: schnorrSignSync,\n  verifySync: schnorrVerifySync\n};\n\nPoint.BASE._setWindowSize(8);\n\nconst crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nconst TAGS = {\n  challenge: 'BIP0340/challenge',\n  aux: 'BIP0340/aux',\n  nonce: 'BIP0340/nonce'\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n  bytesToHex,\n  hexToBytes,\n  concatBytes,\n  mod,\n  invert,\n\n  isValidPrivateKey(privateKey) {\n    try {\n      normalizePrivateKey(privateKey);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  },\n\n  _bigintTo32Bytes: numTo32b,\n  _normalizePrivateKey: normalizePrivateKey,\n  hashToPrivateKey: hash => {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n\n    const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n\n    return numTo32b(num);\n  },\n  randomBytes: function () {\n    let bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      const {\n        randomBytes\n      } = crypto.node;\n      return Uint8Array.from(randomBytes(bytesLength));\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: () => {\n    return utils.hashToPrivateKey(utils.randomBytes(40));\n  },\n  sha256: async function () {\n    for (var _len4 = arguments.length, messages = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      messages[_key4] = arguments[_key4];\n    }\n\n    if (crypto.web) {\n      const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      const {\n        createHash\n      } = crypto.node;\n      const hash = createHash('sha256');\n      messages.forEach(m => hash.update(m));\n      return Uint8Array.from(hash.digest());\n    } else {\n      throw new Error(\"The environment doesn't have sha256 function\");\n    }\n  },\n  hmacSha256: async function (key) {\n    for (var _len5 = arguments.length, messages = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      messages[_key5 - 1] = arguments[_key5];\n    }\n\n    if (crypto.web) {\n      const ckey = await crypto.web.subtle.importKey('raw', key, {\n        name: 'HMAC',\n        hash: {\n          name: 'SHA-256'\n        }\n      }, false, ['sign']);\n      const message = concatBytes(...messages);\n      const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      const {\n        createHmac\n      } = crypto.node;\n      const hash = createHmac('sha256', key);\n      messages.forEach(m => hash.update(m));\n      return Uint8Array.from(hash.digest());\n    } else {\n      throw new Error(\"The environment doesn't have hmac-sha256 function\");\n    }\n  },\n  sha256Sync: undefined,\n  hmacSha256Sync: undefined,\n  taggedHash: async function (tag) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n\n    if (tagP === undefined) {\n      const tagH = await utils.sha256(Uint8Array.from(tag, c => c.charCodeAt(0)));\n      tagP = concatBytes(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n\n    for (var _len6 = arguments.length, messages = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      messages[_key6 - 1] = arguments[_key6];\n    }\n\n    return utils.sha256(tagP, ...messages);\n  },\n  taggedHashSync: function (tag) {\n    if (typeof _sha256Sync !== 'function') throw new ShaError('sha256Sync is undefined, you need to set it');\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n\n    if (tagP === undefined) {\n      const tagH = _sha256Sync(Uint8Array.from(tag, c => c.charCodeAt(0)));\n\n      tagP = concatBytes(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n\n    for (var _len7 = arguments.length, messages = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      messages[_key7 - 1] = arguments[_key7];\n    }\n\n    return _sha256Sync(tagP, ...messages);\n  },\n\n  precompute() {\n    let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n    const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n\n    cached._setWindowSize(windowSize);\n\n    cached.multiply(_3n);\n    return cached;\n  }\n\n};\nObject.defineProperties(utils, {\n  sha256Sync: {\n    configurable: false,\n\n    get() {\n      return _sha256Sync;\n    },\n\n    set(val) {\n      if (!_sha256Sync) _sha256Sync = val;\n    }\n\n  },\n  hmacSha256Sync: {\n    configurable: false,\n\n    get() {\n      return _hmacSha256Sync;\n    },\n\n    set(val) {\n      if (!_hmacSha256Sync) _hmacSha256Sync = val;\n    }\n\n  }\n});","map":{"version":3,"names":["nodeCrypto","_0n","BigInt","_1n","_2n","_3n","_8n","CURVE","Object","freeze","a","b","P","n","h","Gx","Gy","beta","weistrass","x","x2","mod","x3","USE_ENDOMORPHISM","ShaError","Error","constructor","message","JacobianPoint","y","z","fromAffine","p","Point","TypeError","toAffineBatch","points","toInv","invertBatch","map","i","toAffine","normalizeZ","equals","other","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","A","B","C","x1b","D","E","F","X3","Y3","Z3","add","H","r","ZERO","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","d","k1neg","k1","k2neg","k2","splitScalarEndo","k1p","k2p","precomputeWindow","W","windows","base","window","push","wNAF","affinePoint","BASE","_WINDOW_SIZE","precomputes","pointPrecomputes","get","set","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","pr","cached","Math","abs","multiply","point","fake","f1p","f2p","invZ","invert","iz1","iz2","iz3","ax","ay","zz","WeakMap","_setWindowSize","delete","hasEvenY","fromCompressedHex","bytes","isShort","length","bytesToNumber","subarray","isValidFieldElement","y2","sqrtMod","isYOdd","isFirstByteOdd","assertValidity","fromUncompressedHex","fromHex","hex","ensureBytes","len","header","fromPrivateKey","privateKey","normalizePrivateKey","fromSignature","msgHash","signature","recovery","truncateHash","s","normalizeSignature","prefix","R","numTo32bStr","rinv","u1","u2","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","hexToBytes","toHex","toHexX","slice","toRawX","msg","left","right","aP","bQ","sum","undefined","sliceDER","parseInt","parseDERInt","data","bytesToHex","res","parseDERSignature","sBytes","rBytesLeft","Signature","fromCompact","arr","Uint8Array","name","str","hexToNumber","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","concatBytes","arrays","every","reduce","result","pad","hexes","Array","from","v","toString","padStart","uint8a","POW_2_256","num","numTo32b","array","j","hexByte","byte","isNaN","isSafeInteger","pow2","power","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","number","modulo","u","q","m","gcd","nums","scratch","lastMultiplied","acc","inverted","reduceRight","divNearest","ENDO","a1","b1","a2","POW_2_128","k","c1","c2","hash","byteLength","delta","_sha256Sync","_hmacSha256Sync","HmacDrbg","fill","counter","hmac","values","utils","hmacSha256","hmacSync","checkSync","incr","reseed","seed","reseedSync","generate","generateSync","kmdToSig","kBytes","sig","key","normalizePublicKey","publicKey","error","getPublicKey","recoverPublicKey","isProbPub","item","getSharedSecret","privateA","publicB","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","randomBytes","e","finalizeSig","recSig","opts","canonical","der","recovered","assign","hashed","sign","privKey","drbg","signSync","vopts","strict","verify","sinv","schnorrChallengeFinalize","ch","SchnorrSignature","schnorrGetPublicKey","InternalSchnorrSignature","auxRand","getScalar","px","rand","priv","initNonce","t0h","finalizeNonce","k0h","k0","rx","calc","tag","taggedHash","t","TAGS","aux","nonce","challenge","schnorrVerify","calcSync","taggedHashSync","schnorrVerifySync","schnorrSign","schnorrSignSync","initSchnorrVerify","raw","finalizeSchnorrVerify","schnorr","verifySync","crypto","node","web","self","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","bytesLength","getRandomValues","randomPrivateKey","sha256","messages","buffer","subtle","digest","createHash","forEach","update","ckey","importKey","createHmac","sha256Sync","hmacSha256Sync","tagP","tagH","c","charCodeAt","precompute","defineProperties","configurable","val"],"sources":["/Users/sarahagarrat/git/sceneportal/node_modules/@noble/secp256k1/lib/esm/index.js"],"sourcesContent":["/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}