[{"/Users/sarahagarrat/git/sceneportal/src/index.js":"1","/Users/sarahagarrat/git/sceneportal/src/App.js":"2"},{"size":219,"mtime":1663921457975,"results":"3","hashOfConfig":"4"},{"size":7144,"mtime":1664247301894,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1fg1bt8",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/sarahagarrat/git/sceneportal/src/index.js",[],["12","13"],"/Users/sarahagarrat/git/sceneportal/src/App.js",["14","15","16","17"],"//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from \"./idl.json\";\nimport kp from './keypair.json'\n\n\n//CONSTANTS\nconst { SystemProgram, Keypair } = web3;\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\nconst programID = new PublicKey(\"GE2E6QyuXkhRDzBNzYogSahdumMzh53zo7zu7skhdYJP\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  //TOASTS\n\n  const showPhantomToast = () =>\n    toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n  const showGifSentToast = () => toast.success(\"GIF Sent!\");\n\n  //ACTIONS\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = await getProgram();\n      \n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Gif link:\", inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue(\"\");\n      showGifSentToast();\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <div className=\"container\">\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        SIGN IN\n      </button>\n      <p className=\"header\">Scene Portal</p>\n      <p className=\"sub-header\">Your favorite scenes, on the blockchain</p>\n      <div className=\"moon\" />\n      <div className=\"kiki\" />\n    </div>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <p className=\"connected-header\">SCENE PORTAL</p>\n          <button\n            className=\"cta-button disconnect-wallet-button\"\n            onClick={disconnectWallet}\n          >\n            SIGN OUT\n          </button>\n          <form\n            className=\"form\"\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"post your favorite film/tv scene\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img className=\"gif-image\" src={item.gifLink}  alt ={item.gifLink}/>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  //useEFFECTS\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <Toaster\n          toastOptions={{\n            className: \"\",\n            duration: 3000,\n            style: {\n              border: \"1px solid #713200\",\n              padding: \"16px\",\n              color: \"#713200\",\n            },\n          }}\n        />\n        <div className=\"header-container\">\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","severity":1,"message":"23","line":7,"column":8,"nodeType":"24","messageId":"25","endLine":7,"endColumn":11},{"ruleId":"22","severity":1,"message":"26","line":12,"column":24,"nodeType":"24","messageId":"25","endLine":12,"endColumn":31},{"ruleId":"27","severity":1,"message":"28","line":221,"column":6,"nodeType":"29","endLine":221,"endColumn":8,"suggestions":"30"},{"ruleId":"27","severity":1,"message":"31","line":228,"column":6,"nodeType":"29","endLine":228,"endColumn":21,"suggestions":"32"},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'idl' is defined but never used.","Identifier","unusedVar","'Keypair' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkIfWalletIsConnected'. Either include it or remove the dependency array.","ArrayExpression",["35"],"React Hook useEffect has a missing dependency: 'getGifList'. Either include it or remove the dependency array.",["36"],"no-global-assign","no-unsafe-negation",{"desc":"37","fix":"38"},{"desc":"39","fix":"40"},"Update the dependencies array to be: [checkIfWalletIsConnected]",{"range":"41","text":"42"},"Update the dependencies array to be: [getGifList, walletAddress]",{"range":"43","text":"44"},[6397,6399],"[checkIfWalletIsConnected]",[6522,6537],"[getGifList, walletAddress]"]