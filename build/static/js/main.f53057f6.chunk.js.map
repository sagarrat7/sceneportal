{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","web3","Keypair","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","toast","error","connectWallet","success","disconnectWallet","onInputChange","event","value","target","getProgram","Program","fetchIdl","getProvider","idl","connection","Connection","Provider","createGifAccount","provider","program","wallet","programId","rpc","startStuffOff","accounts","user","systemProgram","signers","getGifList","shortenAddress","address","substring","account","fetch","sendGif","length","addGif","useEffect","onLoad","addEventListener","removeEventListener","className","toastOptions","duration","style","border","padding","color","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","userAddress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f53057f6.chunk.js","sourcesContent":["//IMPORTS\nimport React, { useEffect, useState } from \"react\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport \"./App.css\";\nimport idl from \"./idl.json\";\nimport kp from \"./keypair.json\";\n\n//CONSTANTS\nconst { SystemProgram, Keypair } = web3;\n//const SystemProgram = web3.SystemProgram;\n//const Keypair = web3.Keypair;\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = Keypair.fromSecretKey(secret);\nconst programID = new PublicKey(\"GE2E6QyuXkhRDzBNzYogSahdumMzh53zo7zu7skhdYJP\");\nconst network = clusterApiUrl(\"devnet\");\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  //useSTATE\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  //TOASTS\n\n  const showPhantomToast = () =>\n    toast(\"To sign in, download a Phantom Wallet ðŸ‘» at https://phantom.app\");\n  const showConnectedWalletToast = () => toast.success(\"You're signed in!\");\n  const showDisconnectedWalletToast = () => toast.success(\"You've signed out!\");\n  const showGifSentToast = () => toast.success(\"GIF Sent!\");\n\n  //ACTIONS\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        showPhantomToast();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n      showConnectedWalletToast();\n    }\n  };\n\n  const disconnectWallet = () => {\n    console.log(\"Wallet Disconnected\");\n    setWalletAddress(null);\n    showDisconnectedWalletToast();\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProgram = async () => {\n    const idl = await Program.fetchIdl(programID, getProvider());\n    return new Program(idl, programID, getProvider());\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      console.log('base account: ' + baseAccount.publicKey);\n      console.log('user: ' + provider.wallet.publicKey);\n      console.log('sys program: ' + SystemProgram.programId);\n\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const shortenAddress = (address) => {\n    if (!address) return \"\";\n    return address.substring(0, 4) + \".....\" + address.substring(40);\n  };\n\n  const getGifList = async () => {\n    try {\n      const program = await getProgram();\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n      showGifSentToast();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <div className=\"container\">\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        SIGN IN\n      </button>\n      <p className=\"header\">Scene Portal</p>\n      <p className=\"sub-header\">Your favorite scenes, on the blockchain</p>\n      <div className=\"moon\" />\n      <div className=\"kiki\" />\n    </div>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <p className=\"connected-header\">SCENE PORTAL</p>\n          <button\n            className=\"cta-button disconnect-wallet-button\"\n            onClick={disconnectWallet}\n          >\n            SIGN OUT {shortenAddress(walletAddress)}\n          </button>\n          <form\n            className=\"form\"\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"post your favorite film/tv scene\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              SUBMIT\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img className=\"gif-image\" src={item.gifLink} alt={item.gifLink} />\n                <div className=\"address-tag\">\n                  <img\n                    className=\"phantom-image\"\n                    src=\"https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,f_auto,q_auto:eco,dpr_1/sqzgmbkggvc1uwgapeuy\"\n                    alt=\"Phantom Wallet\"\n                  />\n                  <p className=\"address\">\n                    @{shortenAddress(item.userAddress.toString())}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  //useEFFECTS\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      // Call Solana program here.\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <Toaster\n          toastOptions={{\n            className: \"\",\n            duration: 3000,\n            style: {\n              border: \"1px solid #713200\",\n              padding: \"16px\",\n              color: \"#713200\",\n            },\n          }}\n        />\n        <div className=\"header-container\">\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}